/*
 * generated by Xtext 2.30.0
 */
package ui.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import ui.ide.contentassist.antlr.internal.InternalLanguagedslParser;
import ui.services.LanguagedslGrammarAccess;

public class LanguagedslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(LanguagedslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, LanguagedslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getLayoutAccess().getAlternatives_1(), "rule__Layout__Alternatives_1");
			builder.put(grammarAccess.getComponentAccess().getAlternatives(), "rule__Component__Alternatives");
			builder.put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
			builder.put(grammarAccess.getInputAccess().getAlternatives_3(), "rule__Input__Alternatives_3");
			builder.put(grammarAccess.getInputAccess().getAlternatives_3_1_1(), "rule__Input__Alternatives_3_1_1");
			builder.put(grammarAccess.getReferenceAccess().getAlternatives(), "rule__Reference__Alternatives");
			builder.put(grammarAccess.getConditionAccess().getOpAlternatives_0_0(), "rule__Condition__OpAlternatives_0_0");
			builder.put(grammarAccess.getConditionAccess().getAlternatives_1(), "rule__Condition__Alternatives_1");
			builder.put(grammarAccess.getConditionAccess().getOp2Alternatives_2_2_0(), "rule__Condition__Op2Alternatives_2_2_0");
			builder.put(grammarAccess.getExpAccess().getAlternatives(), "rule__Exp__Alternatives");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getTitleAccess().getGroup(), "rule__Title__Group__0");
			builder.put(grammarAccess.getFormAccess().getGroup(), "rule__Form__Group__0");
			builder.put(grammarAccess.getFormAccess().getGroup_2(), "rule__Form__Group_2__0");
			builder.put(grammarAccess.getFormAccess().getGroup_2_1(), "rule__Form__Group_2_1__0");
			builder.put(grammarAccess.getFormAccess().getGroup_2_1_1(), "rule__Form__Group_2_1_1__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getFormUseAccess().getGroup(), "rule__FormUse__Group__0");
			builder.put(grammarAccess.getFormUseAccess().getGroup_2(), "rule__FormUse__Group_2__0");
			builder.put(grammarAccess.getFormUseAccess().getGroup_2_1(), "rule__FormUse__Group_2_1__0");
			builder.put(grammarAccess.getLayoutAccess().getGroup(), "rule__Layout__Group__0");
			builder.put(grammarAccess.getComponentAccess().getGroup_1(), "rule__Component__Group_1__0");
			builder.put(grammarAccess.getButtonAccess().getGroup(), "rule__Button__Group__0");
			builder.put(grammarAccess.getInputAccess().getGroup(), "rule__Input__Group__0");
			builder.put(grammarAccess.getInputAccess().getGroup_3_0(), "rule__Input__Group_3_0__0");
			builder.put(grammarAccess.getInputAccess().getGroup_3_1(), "rule__Input__Group_3_1__0");
			builder.put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
			builder.put(grammarAccess.getConditionAccess().getGroup_2(), "rule__Condition__Group_2__0");
			builder.put(grammarAccess.getLabelAccess().getGroup(), "rule__Label__Group__0");
			builder.put(grammarAccess.getLabelAccess().getGroup_3(), "rule__Label__Group_3__0");
			builder.put(grammarAccess.getTextExpAccess().getGroup(), "rule__TextExp__Group__0");
			builder.put(grammarAccess.getTitleAccess().getNameAssignment_1(), "rule__Title__NameAssignment_1");
			builder.put(grammarAccess.getTitleAccess().getFormAssignment_2(), "rule__Title__FormAssignment_2");
			builder.put(grammarAccess.getFormAccess().getNameAssignment_1(), "rule__Form__NameAssignment_1");
			builder.put(grammarAccess.getFormAccess().getParamAssignment_2_1_0(), "rule__Form__ParamAssignment_2_1_0");
			builder.put(grammarAccess.getFormAccess().getParam2Assignment_2_1_1_1(), "rule__Form__Param2Assignment_2_1_1_1");
			builder.put(grammarAccess.getFormAccess().getLayoutAssignment_4(), "rule__Form__LayoutAssignment_4");
			builder.put(grammarAccess.getParameterAccess().getNameAssignment_0(), "rule__Parameter__NameAssignment_0");
			builder.put(grammarAccess.getParameterAccess().getTypeAssignment_2(), "rule__Parameter__TypeAssignment_2");
			builder.put(grammarAccess.getFormUseAccess().getNameAssignment_0(), "rule__FormUse__NameAssignment_0");
			builder.put(grammarAccess.getFormUseAccess().getExpAssignment_2_0(), "rule__FormUse__ExpAssignment_2_0");
			builder.put(grammarAccess.getFormUseAccess().getExp2Assignment_2_1_1(), "rule__FormUse__Exp2Assignment_2_1_1");
			builder.put(grammarAccess.getLayoutAccess().getComponentAssignment_3(), "rule__Layout__ComponentAssignment_3");
			builder.put(grammarAccess.getComponentAccess().getLayoutAssignment_0(), "rule__Component__LayoutAssignment_0");
			builder.put(grammarAccess.getComponentAccess().getElementAssignment_1_1(), "rule__Component__ElementAssignment_1_1");
			builder.put(grammarAccess.getComponentAccess().getFormuseAssignment_2(), "rule__Component__FormuseAssignment_2");
			builder.put(grammarAccess.getElementAccess().getLabelAssignment_0(), "rule__Element__LabelAssignment_0");
			builder.put(grammarAccess.getElementAccess().getInputAssignment_1(), "rule__Element__InputAssignment_1");
			builder.put(grammarAccess.getElementAccess().getButtonAssignment_2(), "rule__Element__ButtonAssignment_2");
			builder.put(grammarAccess.getButtonAccess().getSaveAssignment_1(), "rule__Button__SaveAssignment_1");
			builder.put(grammarAccess.getButtonAccess().getNameAssignment_2(), "rule__Button__NameAssignment_2");
			builder.put(grammarAccess.getButtonAccess().getExpAssignment_4(), "rule__Button__ExpAssignment_4");
			builder.put(grammarAccess.getInputAccess().getNameAssignment_1(), "rule__Input__NameAssignment_1");
			builder.put(grammarAccess.getInputAccess().getExpAssignment_3_0_0(), "rule__Input__ExpAssignment_3_0_0");
			builder.put(grammarAccess.getInputAccess().getConditionAssignment_3_0_1(), "rule__Input__ConditionAssignment_3_0_1");
			builder.put(grammarAccess.getInputAccess().getRefAssignment_3_1_0(), "rule__Input__RefAssignment_3_1_0");
			builder.put(grammarAccess.getInputAccess().getExpAssignment_3_1_2(), "rule__Input__ExpAssignment_3_1_2");
			builder.put(grammarAccess.getConditionAccess().getOpAssignment_0(), "rule__Condition__OpAssignment_0");
			builder.put(grammarAccess.getConditionAccess().getExpAssignment_1_0(), "rule__Condition__ExpAssignment_1_0");
			builder.put(grammarAccess.getConditionAccess().getRefAssignment_1_1(), "rule__Condition__RefAssignment_1_1");
			builder.put(grammarAccess.getConditionAccess().getTypeAssignment_2_1(), "rule__Condition__TypeAssignment_2_1");
			builder.put(grammarAccess.getConditionAccess().getOp2Assignment_2_2(), "rule__Condition__Op2Assignment_2_2");
			builder.put(grammarAccess.getConditionAccess().getExp2Assignment_2_3(), "rule__Condition__Exp2Assignment_2_3");
			builder.put(grammarAccess.getLabelAccess().getExpAssignment_2(), "rule__Label__ExpAssignment_2");
			builder.put(grammarAccess.getLabelAccess().getFieldAssignment_3_1(), "rule__Label__FieldAssignment_3_1");
			builder.put(grammarAccess.getLabelAccess().getExp2Assignment_4(), "rule__Label__Exp2Assignment_4");
			builder.put(grammarAccess.getFieldAccess().getNameAssignment(), "rule__Field__NameAssignment");
			builder.put(grammarAccess.getExpAccess().getValueAssignment_0(), "rule__Exp__ValueAssignment_0");
			builder.put(grammarAccess.getExpAccess().getTypeAssignment_1(), "rule__Exp__TypeAssignment_1");
			builder.put(grammarAccess.getExpAccess().getNumberAssignment_2(), "rule__Exp__NumberAssignment_2");
			builder.put(grammarAccess.getTextExpAccess().getExpAssignment_1(), "rule__TextExp__ExpAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private LanguagedslGrammarAccess grammarAccess;

	@Override
	protected InternalLanguagedslParser createParser() {
		InternalLanguagedslParser result = new InternalLanguagedslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public LanguagedslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(LanguagedslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
