/*
 * generated by Xtext 2.30.0
 */
package ui.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import ui.languagedsl.Button;
import ui.languagedsl.Component;
import ui.languagedsl.Condition;
import ui.languagedsl.Element;
import ui.languagedsl.Exp;
import ui.languagedsl.Field;
import ui.languagedsl.Form;
import ui.languagedsl.FormUse;
import ui.languagedsl.Input;
import ui.languagedsl.Label;
import ui.languagedsl.LanguagedslPackage;
import ui.languagedsl.Layout;
import ui.languagedsl.TextExp;
import ui.languagedsl.Title;
import ui.services.LanguagedslGrammarAccess;

@SuppressWarnings("all")
public class LanguagedslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private LanguagedslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == LanguagedslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case LanguagedslPackage.BUTTON:
				sequence_Button(context, (Button) semanticObject); 
				return; 
			case LanguagedslPackage.COMPONENT:
				sequence_Component(context, (Component) semanticObject); 
				return; 
			case LanguagedslPackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case LanguagedslPackage.ELEMENT:
				sequence_Element(context, (Element) semanticObject); 
				return; 
			case LanguagedslPackage.EXP:
				sequence_Exp(context, (Exp) semanticObject); 
				return; 
			case LanguagedslPackage.FIELD:
				sequence_Field(context, (Field) semanticObject); 
				return; 
			case LanguagedslPackage.FORM:
				sequence_Form(context, (Form) semanticObject); 
				return; 
			case LanguagedslPackage.FORM_USE:
				sequence_FormUse(context, (FormUse) semanticObject); 
				return; 
			case LanguagedslPackage.INPUT:
				sequence_Input(context, (Input) semanticObject); 
				return; 
			case LanguagedslPackage.LABEL:
				sequence_Label(context, (Label) semanticObject); 
				return; 
			case LanguagedslPackage.LAYOUT:
				sequence_Layout(context, (Layout) semanticObject); 
				return; 
			case LanguagedslPackage.PARAMETER:
				sequence_Parameter(context, (ui.languagedsl.Parameter) semanticObject); 
				return; 
			case LanguagedslPackage.TEXT_EXP:
				sequence_TextExp(context, (TextExp) semanticObject); 
				return; 
			case LanguagedslPackage.TITLE:
				sequence_Title(context, (Title) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Button returns Button
	 *     Reference returns Button
	 *
	 * Constraint:
	 *     (save=Save? name=ID exp=Exp)
	 * </pre>
	 */
	protected void sequence_Button(ISerializationContext context, Button semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Component returns Component
	 *
	 * Constraint:
	 *     (layout+=Layout | element+=Element | formuse+=FormUse)
	 * </pre>
	 */
	protected void sequence_Component(ISerializationContext context, Component semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             op='&gt;' | 
	 *             op='&lt;' | 
	 *             op='&lt;=' | 
	 *             op='&gt;=' | 
	 *             op='==' | 
	 *             op='!='
	 *         ) 
	 *         (exp=Exp | ref=[Reference|ID]) 
	 *         (
	 *             type=Type 
	 *             (
	 *                 op2='&gt;' | 
	 *                 op2='&lt;' | 
	 *                 op2='&lt;=' | 
	 *                 op2='&gt;=' | 
	 *                 op2='==' | 
	 *                 op2='!='
	 *             ) 
	 *             exp2=Exp
	 *         )?
	 *     )
	 * </pre>
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns Element
	 *
	 * Constraint:
	 *     (label+=Label | input+=Input | button+=Button)
	 * </pre>
	 */
	protected void sequence_Element(ISerializationContext context, Element semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Exp returns Exp
	 *
	 * Constraint:
	 *     (value=STRING | type=Type | number=INT)
	 * </pre>
	 */
	protected void sequence_Exp(ISerializationContext context, Exp semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Field returns Field
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Field(ISerializationContext context, Field semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LanguagedslPackage.Literals.FIELD__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LanguagedslPackage.Literals.FIELD__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     FormUse returns FormUse
	 *
	 * Constraint:
	 *     (name=ID (exp=Exp exp2=Exp?)?)
	 * </pre>
	 */
	protected void sequence_FormUse(ISerializationContext context, FormUse semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Form returns Form
	 *
	 * Constraint:
	 *     (name=ID (param+=Parameter param2+=Parameter*)? layout+=Layout)
	 * </pre>
	 */
	protected void sequence_Form(ISerializationContext context, Form semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Input returns Input
	 *     Reference returns Input
	 *
	 * Constraint:
	 *     (name=ID ((exp=Exp condition=Condition?) | (ref=[Reference|ID] exp=Exp)))
	 * </pre>
	 */
	protected void sequence_Input(ISerializationContext context, Input semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Label returns Label
	 *
	 * Constraint:
	 *     (exp=Exp field+=Field? exp2=Exp?)
	 * </pre>
	 */
	protected void sequence_Label(ISerializationContext context, Label semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Layout returns Layout
	 *
	 * Constraint:
	 *     component+=Component*
	 * </pre>
	 */
	protected void sequence_Layout(ISerializationContext context, Layout semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Parameter returns Parameter
	 *     Reference returns Parameter
	 *
	 * Constraint:
	 *     (name=ID type=Type)
	 * </pre>
	 */
	protected void sequence_Parameter(ISerializationContext context, ui.languagedsl.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LanguagedslPackage.Literals.REFERENCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LanguagedslPackage.Literals.REFERENCE__NAME));
			if (transientValues.isValueTransient(semanticObject, LanguagedslPackage.Literals.PARAMETER__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LanguagedslPackage.Literals.PARAMETER__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Exp returns TextExp
	 *     TextExp returns TextExp
	 *
	 * Constraint:
	 *     exp=Exp
	 * </pre>
	 */
	protected void sequence_TextExp(ISerializationContext context, TextExp semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LanguagedslPackage.Literals.TEXT_EXP__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LanguagedslPackage.Literals.TEXT_EXP__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTextExpAccess().getExpExpParserRuleCall_1_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Title returns Title
	 *
	 * Constraint:
	 *     (name=ID form+=Form*)
	 * </pre>
	 */
	protected void sequence_Title(ISerializationContext context, Title semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
