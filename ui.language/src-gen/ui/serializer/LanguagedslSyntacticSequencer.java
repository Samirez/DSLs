/*
 * generated by Xtext 2.30.0
 */
package ui.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import ui.services.LanguagedslGrammarAccess;

@SuppressWarnings("all")
public class LanguagedslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected LanguagedslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Form___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q;
	protected AbstractElementAlias match_Input_EqualsSignEqualsSignKeyword_3_1_1_1_or_ExclamationMarkEqualsSignKeyword_3_1_1_2_or_GreaterThanSignEqualsSignKeyword_3_1_1_3_or_LessThanSignEqualsSignKeyword_3_1_1_0;
	protected AbstractElementAlias match_Layout_ColumnKeyword_1_1_or_RowKeyword_1_0;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (LanguagedslGrammarAccess) access;
		match_Form___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getFormAccess().getLeftParenthesisKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getFormAccess().getRightParenthesisKeyword_2_2()));
		match_Input_EqualsSignEqualsSignKeyword_3_1_1_1_or_ExclamationMarkEqualsSignKeyword_3_1_1_2_or_GreaterThanSignEqualsSignKeyword_3_1_1_3_or_LessThanSignEqualsSignKeyword_3_1_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getInputAccess().getEqualsSignEqualsSignKeyword_3_1_1_1()), new TokenAlias(false, false, grammarAccess.getInputAccess().getExclamationMarkEqualsSignKeyword_3_1_1_2()), new TokenAlias(false, false, grammarAccess.getInputAccess().getGreaterThanSignEqualsSignKeyword_3_1_1_3()), new TokenAlias(false, false, grammarAccess.getInputAccess().getLessThanSignEqualsSignKeyword_3_1_1_0()));
		match_Layout_ColumnKeyword_1_1_or_RowKeyword_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getLayoutAccess().getColumnKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getLayoutAccess().getRowKeyword_1_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Form___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q.equals(syntax))
				emit_Form___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Input_EqualsSignEqualsSignKeyword_3_1_1_1_or_ExclamationMarkEqualsSignKeyword_3_1_1_2_or_GreaterThanSignEqualsSignKeyword_3_1_1_3_or_LessThanSignEqualsSignKeyword_3_1_1_0.equals(syntax))
				emit_Input_EqualsSignEqualsSignKeyword_3_1_1_1_or_ExclamationMarkEqualsSignKeyword_3_1_1_2_or_GreaterThanSignEqualsSignKeyword_3_1_1_3_or_LessThanSignEqualsSignKeyword_3_1_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Layout_ColumnKeyword_1_1_or_RowKeyword_1_0.equals(syntax))
				emit_Layout_ColumnKeyword_1_1_or_RowKeyword_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) '{' layout+=Layout
	 
	 * </pre>
	 */
	protected void emit_Form___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '&lt;=' | '==' | '!=' | '&gt;='
	 *
	 * This ambiguous syntax occurs at:
	 *     ref=[Reference|ID] (ambiguity) exp=Exp
	 
	 * </pre>
	 */
	protected void emit_Input_EqualsSignEqualsSignKeyword_3_1_1_1_or_ExclamationMarkEqualsSignKeyword_3_1_1_2_or_GreaterThanSignEqualsSignKeyword_3_1_1_3_or_LessThanSignEqualsSignKeyword_3_1_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'row' | 'column'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '{' '}' (rule start)
	 *     (rule start) (ambiguity) '{' component+=Component
	 
	 * </pre>
	 */
	protected void emit_Layout_ColumnKeyword_1_1_or_RowKeyword_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
