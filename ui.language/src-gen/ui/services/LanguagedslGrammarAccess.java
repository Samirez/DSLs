/*
 * generated by Xtext 2.30.0
 */
package ui.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class LanguagedslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class TitleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ui.Languagedsl.Title");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTitleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cFormAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFormFormParserRuleCall_2_0 = (RuleCall)cFormAssignment_2.eContents().get(0);
		
		//Title:
		//    'title' name=ID form+=Form*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'title' name=ID form+=Form*
		public Group getGroup() { return cGroup; }
		
		//'title'
		public Keyword getTitleKeyword_0() { return cTitleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//form+=Form*
		public Assignment getFormAssignment_2() { return cFormAssignment_2; }
		
		//Form
		public RuleCall getFormFormParserRuleCall_2_0() { return cFormFormParserRuleCall_2_0; }
	}
	public class FormElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ui.Languagedsl.Form");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFormKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cParamAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cParamParameterParserRuleCall_2_1_0_0 = (RuleCall)cParamAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cParam2Assignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cParam2ParameterParserRuleCall_2_1_1_1_0 = (RuleCall)cParam2Assignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLayoutAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLayoutLayoutParserRuleCall_4_0 = (RuleCall)cLayoutAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Form:
		//    'form' name=ID ('('(param+=Parameter (',' param2+=Parameter)*)?')')? '{' layout+=Layout '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'form' name=ID ('('(param+=Parameter (',' param2+=Parameter)*)?')')? '{' layout+=Layout '}'
		public Group getGroup() { return cGroup; }
		
		//'form'
		public Keyword getFormKeyword_0() { return cFormKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('('(param+=Parameter (',' param2+=Parameter)*)?')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//(param+=Parameter (',' param2+=Parameter)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//param+=Parameter
		public Assignment getParamAssignment_2_1_0() { return cParamAssignment_2_1_0; }
		
		//Parameter
		public RuleCall getParamParameterParserRuleCall_2_1_0_0() { return cParamParameterParserRuleCall_2_1_0_0; }
		
		//(',' param2+=Parameter)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }
		
		//param2+=Parameter
		public Assignment getParam2Assignment_2_1_1_1() { return cParam2Assignment_2_1_1_1; }
		
		//Parameter
		public RuleCall getParam2ParameterParserRuleCall_2_1_1_1_0() { return cParam2ParameterParserRuleCall_2_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//layout+=Layout
		public Assignment getLayoutAssignment_4() { return cLayoutAssignment_4; }
		
		//Layout
		public RuleCall getLayoutLayoutParserRuleCall_4_0() { return cLayoutLayoutParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ui.Languagedsl.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Parameter:
		//    name=ID ':' type=Type
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=Type
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}
	public class FormUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ui.Languagedsl.FormUse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExpAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExpExpParserRuleCall_2_0_0 = (RuleCall)cExpAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cExp2Assignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cExp2ExpParserRuleCall_2_1_1_0 = (RuleCall)cExp2Assignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FormUse:
		//    name=ID '('(exp=Exp (',' exp2=Exp)?)?')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '('(exp=Exp (',' exp2=Exp)?)?')'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(exp=Exp (',' exp2=Exp)?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//exp=Exp
		public Assignment getExpAssignment_2_0() { return cExpAssignment_2_0; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_2_0_0() { return cExpExpParserRuleCall_2_0_0; }
		
		//(',' exp2=Exp)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//exp2=Exp
		public Assignment getExp2Assignment_2_1_1() { return cExp2Assignment_2_1_1; }
		
		//Exp
		public RuleCall getExp2ExpParserRuleCall_2_1_1_0() { return cExp2ExpParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class LayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ui.Languagedsl.Layout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLayoutAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cRowKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cColumnKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cComponentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComponentComponentParserRuleCall_3_0 = (RuleCall)cComponentAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Layout:
		//    {Layout} ('row' | 'column') '{' component+=Component* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Layout} ('row' | 'column') '{' component+=Component* '}'
		public Group getGroup() { return cGroup; }
		
		//{Layout}
		public Action getLayoutAction_0() { return cLayoutAction_0; }
		
		//('row' | 'column')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'row'
		public Keyword getRowKeyword_1_0() { return cRowKeyword_1_0; }
		
		//'column'
		public Keyword getColumnKeyword_1_1() { return cColumnKeyword_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//component+=Component*
		public Assignment getComponentAssignment_3() { return cComponentAssignment_3; }
		
		//Component
		public RuleCall getComponentComponentParserRuleCall_3_0() { return cComponentComponentParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ui.Languagedsl.Component");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLayoutAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLayoutLayoutParserRuleCall_0_0 = (RuleCall)cLayoutAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cComponentAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cElementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementElementParserRuleCall_1_1_0 = (RuleCall)cElementAssignment_1_1.eContents().get(0);
		private final Assignment cFormuseAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cFormuseFormUseParserRuleCall_2_0 = (RuleCall)cFormuseAssignment_2.eContents().get(0);
		
		//Component:
		//    layout+=Layout | {Component} element+=Element | formuse+=FormUse
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//layout+=Layout | {Component} element+=Element | formuse+=FormUse
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//layout+=Layout
		public Assignment getLayoutAssignment_0() { return cLayoutAssignment_0; }
		
		//Layout
		public RuleCall getLayoutLayoutParserRuleCall_0_0() { return cLayoutLayoutParserRuleCall_0_0; }
		
		//{Component} element+=Element
		public Group getGroup_1() { return cGroup_1; }
		
		//{Component}
		public Action getComponentAction_1_0() { return cComponentAction_1_0; }
		
		//element+=Element
		public Assignment getElementAssignment_1_1() { return cElementAssignment_1_1; }
		
		//Element
		public RuleCall getElementElementParserRuleCall_1_1_0() { return cElementElementParserRuleCall_1_1_0; }
		
		//formuse+=FormUse
		public Assignment getFormuseAssignment_2() { return cFormuseAssignment_2; }
		
		//FormUse
		public RuleCall getFormuseFormUseParserRuleCall_2_0() { return cFormuseFormUseParserRuleCall_2_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ui.Languagedsl.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLabelAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLabelLabelParserRuleCall_0_0 = (RuleCall)cLabelAssignment_0.eContents().get(0);
		private final Assignment cInputAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cInputInputParserRuleCall_1_0 = (RuleCall)cInputAssignment_1.eContents().get(0);
		private final Assignment cButtonAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cButtonButtonParserRuleCall_2_0 = (RuleCall)cButtonAssignment_2.eContents().get(0);
		
		//Element:
		//    label+=Label | input+=Input | button+=Button
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//label+=Label | input+=Input | button+=Button
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//label+=Label
		public Assignment getLabelAssignment_0() { return cLabelAssignment_0; }
		
		//Label
		public RuleCall getLabelLabelParserRuleCall_0_0() { return cLabelLabelParserRuleCall_0_0; }
		
		//input+=Input
		public Assignment getInputAssignment_1() { return cInputAssignment_1; }
		
		//Input
		public RuleCall getInputInputParserRuleCall_1_0() { return cInputInputParserRuleCall_1_0; }
		
		//button+=Button
		public Assignment getButtonAssignment_2() { return cButtonAssignment_2; }
		
		//Button
		public RuleCall getButtonButtonParserRuleCall_2_0() { return cButtonButtonParserRuleCall_2_0; }
	}
	public class ButtonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ui.Languagedsl.Button");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cButtonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSaveAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSaveSaveParserRuleCall_1_0 = (RuleCall)cSaveAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpExpParserRuleCall_4_0 = (RuleCall)cExpAssignment_4.eContents().get(0);
		
		//Button:
		//    'button' (save=Save)? name=ID ':' exp=Exp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'button' (save=Save)? name=ID ':' exp=Exp
		public Group getGroup() { return cGroup; }
		
		//'button'
		public Keyword getButtonKeyword_0() { return cButtonKeyword_0; }
		
		//(save=Save)?
		public Assignment getSaveAssignment_1() { return cSaveAssignment_1; }
		
		//Save
		public RuleCall getSaveSaveParserRuleCall_1_0() { return cSaveSaveParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//exp=Exp
		public Assignment getExpAssignment_4() { return cExpAssignment_4; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_4_0() { return cExpExpParserRuleCall_4_0; }
	}
	public class SaveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ui.Languagedsl.Save");
		private final Keyword cAsteriskKeyword = (Keyword)rule.eContents().get(1);
		
		//Save:
		//    '*'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'*'
		public Keyword getAsteriskKeyword() { return cAsteriskKeyword; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ui.Languagedsl.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cExpAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cExpExpParserRuleCall_3_0_0_0 = (RuleCall)cExpAssignment_3_0_0.eContents().get(0);
		private final Assignment cConditionAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_3_0_1_0 = (RuleCall)cConditionAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cRefAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final CrossReference cRefReferenceCrossReference_3_1_0_0 = (CrossReference)cRefAssignment_3_1_0.eContents().get(0);
		private final RuleCall cRefReferenceIDTerminalRuleCall_3_1_0_0_1 = (RuleCall)cRefReferenceCrossReference_3_1_0_0.eContents().get(1);
		private final Alternatives cAlternatives_3_1_1 = (Alternatives)cGroup_3_1.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_3_1_1_0 = (Keyword)cAlternatives_3_1_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_3_1_1_1 = (Keyword)cAlternatives_3_1_1.eContents().get(1);
		private final Keyword cExclamationMarkEqualsSignKeyword_3_1_1_2 = (Keyword)cAlternatives_3_1_1.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3_1_1_3 = (Keyword)cAlternatives_3_1_1.eContents().get(3);
		private final Assignment cExpAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cExpExpParserRuleCall_3_1_2_0 = (RuleCall)cExpAssignment_3_1_2.eContents().get(0);
		
		//Input:
		//    'input' name=ID ':' (exp=Exp condition=Condition? |
		//        ref=[Reference] ('<='|'=='|'!='|'>=') exp=Exp)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'input' name=ID ':' (exp=Exp condition=Condition? |
		//    ref=[Reference] ('<='|'=='|'!='|'>=') exp=Exp)
		public Group getGroup() { return cGroup; }
		
		//'input'
		public Keyword getInputKeyword_0() { return cInputKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//(exp=Exp condition=Condition? |
		//       ref=[Reference] ('<='|'=='|'!='|'>=') exp=Exp)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//exp=Exp condition=Condition?
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//exp=Exp
		public Assignment getExpAssignment_3_0_0() { return cExpAssignment_3_0_0; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_3_0_0_0() { return cExpExpParserRuleCall_3_0_0_0; }
		
		//condition=Condition?
		public Assignment getConditionAssignment_3_0_1() { return cConditionAssignment_3_0_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_3_0_1_0() { return cConditionConditionParserRuleCall_3_0_1_0; }
		
		//ref=[Reference] ('<='|'=='|'!='|'>=') exp=Exp
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//ref=[Reference]
		public Assignment getRefAssignment_3_1_0() { return cRefAssignment_3_1_0; }
		
		//[Reference]
		public CrossReference getRefReferenceCrossReference_3_1_0_0() { return cRefReferenceCrossReference_3_1_0_0; }
		
		//ID
		public RuleCall getRefReferenceIDTerminalRuleCall_3_1_0_0_1() { return cRefReferenceIDTerminalRuleCall_3_1_0_0_1; }
		
		//('<='|'=='|'!='|'>=')
		public Alternatives getAlternatives_3_1_1() { return cAlternatives_3_1_1; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_3_1_1_0() { return cLessThanSignEqualsSignKeyword_3_1_1_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_3_1_1_1() { return cEqualsSignEqualsSignKeyword_3_1_1_1; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_3_1_1_2() { return cExclamationMarkEqualsSignKeyword_3_1_1_2; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_3_1_1_3() { return cGreaterThanSignEqualsSignKeyword_3_1_1_3; }
		
		//exp=Exp
		public Assignment getExpAssignment_3_1_2() { return cExpAssignment_3_1_2; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_3_1_2_0() { return cExpExpParserRuleCall_3_1_2_0; }
	}
	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ui.Languagedsl.Reference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInputParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cButtonParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParameterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Reference:
		//    Input | Button | Parameter
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Input | Button | Parameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Input
		public RuleCall getInputParserRuleCall_0() { return cInputParserRuleCall_0; }
		
		//Button
		public RuleCall getButtonParserRuleCall_1() { return cButtonParserRuleCall_1; }
		
		//Parameter
		public RuleCall getParameterParserRuleCall_2() { return cParameterParserRuleCall_2; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ui.Languagedsl.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cOpAlternatives_0_0 = (Alternatives)cOpAssignment_0.eContents().get(0);
		private final Keyword cOpGreaterThanSignKeyword_0_0_0 = (Keyword)cOpAlternatives_0_0.eContents().get(0);
		private final Keyword cOpLessThanSignKeyword_0_0_1 = (Keyword)cOpAlternatives_0_0.eContents().get(1);
		private final Keyword cOpLessThanSignEqualsSignKeyword_0_0_2 = (Keyword)cOpAlternatives_0_0.eContents().get(2);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_0_0_3 = (Keyword)cOpAlternatives_0_0.eContents().get(3);
		private final Keyword cOpEqualsSignEqualsSignKeyword_0_0_4 = (Keyword)cOpAlternatives_0_0.eContents().get(4);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_0_0_5 = (Keyword)cOpAlternatives_0_0.eContents().get(5);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cExpExpParserRuleCall_1_0_0 = (RuleCall)cExpAssignment_1_0.eContents().get(0);
		private final Assignment cRefAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cRefReferenceCrossReference_1_1_0 = (CrossReference)cRefAssignment_1_1.eContents().get(0);
		private final RuleCall cRefReferenceIDTerminalRuleCall_1_1_0_1 = (RuleCall)cRefReferenceCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAmpersandAmpersandKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Assignment cOp2Assignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final Alternatives cOp2Alternatives_2_2_0 = (Alternatives)cOp2Assignment_2_2.eContents().get(0);
		private final Keyword cOp2GreaterThanSignKeyword_2_2_0_0 = (Keyword)cOp2Alternatives_2_2_0.eContents().get(0);
		private final Keyword cOp2LessThanSignKeyword_2_2_0_1 = (Keyword)cOp2Alternatives_2_2_0.eContents().get(1);
		private final Keyword cOp2LessThanSignEqualsSignKeyword_2_2_0_2 = (Keyword)cOp2Alternatives_2_2_0.eContents().get(2);
		private final Keyword cOp2GreaterThanSignEqualsSignKeyword_2_2_0_3 = (Keyword)cOp2Alternatives_2_2_0.eContents().get(3);
		private final Keyword cOp2EqualsSignEqualsSignKeyword_2_2_0_4 = (Keyword)cOp2Alternatives_2_2_0.eContents().get(4);
		private final Keyword cOp2ExclamationMarkEqualsSignKeyword_2_2_0_5 = (Keyword)cOp2Alternatives_2_2_0.eContents().get(5);
		private final Assignment cExp2Assignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cExp2ExpParserRuleCall_2_3_0 = (RuleCall)cExp2Assignment_2_3.eContents().get(0);
		
		//Condition:
		//    op=('>'|'<'|'<='|'>='|'=='|'!=') (exp=Exp | ref=[Reference])
		//    ('&&' type=Type op2=('>'|'<'|'<='|'>='|'=='|'!=') exp2=Exp)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//op=('>'|'<'|'<='|'>='|'=='|'!=') (exp=Exp | ref=[Reference])
		//('&&' type=Type op2=('>'|'<'|'<='|'>='|'=='|'!=') exp2=Exp)?
		public Group getGroup() { return cGroup; }
		
		//op=('>'|'<'|'<='|'>='|'=='|'!=')
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//('>'|'<'|'<='|'>='|'=='|'!=')
		public Alternatives getOpAlternatives_0_0() { return cOpAlternatives_0_0; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_0_0_0() { return cOpGreaterThanSignKeyword_0_0_0; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_0_0_1() { return cOpLessThanSignKeyword_0_0_1; }
		
		//'<='
		public Keyword getOpLessThanSignEqualsSignKeyword_0_0_2() { return cOpLessThanSignEqualsSignKeyword_0_0_2; }
		
		//'>='
		public Keyword getOpGreaterThanSignEqualsSignKeyword_0_0_3() { return cOpGreaterThanSignEqualsSignKeyword_0_0_3; }
		
		//'=='
		public Keyword getOpEqualsSignEqualsSignKeyword_0_0_4() { return cOpEqualsSignEqualsSignKeyword_0_0_4; }
		
		//'!='
		public Keyword getOpExclamationMarkEqualsSignKeyword_0_0_5() { return cOpExclamationMarkEqualsSignKeyword_0_0_5; }
		
		//(exp=Exp | ref=[Reference])
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//exp=Exp
		public Assignment getExpAssignment_1_0() { return cExpAssignment_1_0; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_1_0_0() { return cExpExpParserRuleCall_1_0_0; }
		
		//ref=[Reference]
		public Assignment getRefAssignment_1_1() { return cRefAssignment_1_1; }
		
		//[Reference]
		public CrossReference getRefReferenceCrossReference_1_1_0() { return cRefReferenceCrossReference_1_1_0; }
		
		//ID
		public RuleCall getRefReferenceIDTerminalRuleCall_1_1_0_1() { return cRefReferenceIDTerminalRuleCall_1_1_0_1; }
		
		//('&&' type=Type op2=('>'|'<'|'<='|'>='|'=='|'!=') exp2=Exp)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_2_0() { return cAmpersandAmpersandKeyword_2_0; }
		
		//type=Type
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_1_0() { return cTypeTypeParserRuleCall_2_1_0; }
		
		//op2=('>'|'<'|'<='|'>='|'=='|'!=')
		public Assignment getOp2Assignment_2_2() { return cOp2Assignment_2_2; }
		
		//('>'|'<'|'<='|'>='|'=='|'!=')
		public Alternatives getOp2Alternatives_2_2_0() { return cOp2Alternatives_2_2_0; }
		
		//'>'
		public Keyword getOp2GreaterThanSignKeyword_2_2_0_0() { return cOp2GreaterThanSignKeyword_2_2_0_0; }
		
		//'<'
		public Keyword getOp2LessThanSignKeyword_2_2_0_1() { return cOp2LessThanSignKeyword_2_2_0_1; }
		
		//'<='
		public Keyword getOp2LessThanSignEqualsSignKeyword_2_2_0_2() { return cOp2LessThanSignEqualsSignKeyword_2_2_0_2; }
		
		//'>='
		public Keyword getOp2GreaterThanSignEqualsSignKeyword_2_2_0_3() { return cOp2GreaterThanSignEqualsSignKeyword_2_2_0_3; }
		
		//'=='
		public Keyword getOp2EqualsSignEqualsSignKeyword_2_2_0_4() { return cOp2EqualsSignEqualsSignKeyword_2_2_0_4; }
		
		//'!='
		public Keyword getOp2ExclamationMarkEqualsSignKeyword_2_2_0_5() { return cOp2ExclamationMarkEqualsSignKeyword_2_2_0_5; }
		
		//exp2=Exp
		public Assignment getExp2Assignment_2_3() { return cExp2Assignment_2_3; }
		
		//Exp
		public RuleCall getExp2ExpParserRuleCall_2_3_0() { return cExp2ExpParserRuleCall_2_3_0; }
	}
	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ui.Languagedsl.Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAmpersandKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFieldAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFieldFieldParserRuleCall_3_1_0 = (RuleCall)cFieldAssignment_3_1.eContents().get(0);
		private final Keyword cAmpersandKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cExp2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExp2ExpParserRuleCall_4_0 = (RuleCall)cExp2Assignment_4.eContents().get(0);
		
		//Label:
		//    'label' ':' exp=Exp ('&'field+=Field'&')? exp2=Exp?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'label' ':' exp=Exp ('&'field+=Field'&')? exp2=Exp?
		public Group getGroup() { return cGroup; }
		
		//'label'
		public Keyword getLabelKeyword_0() { return cLabelKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//exp=Exp
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_2_0() { return cExpExpParserRuleCall_2_0; }
		
		//('&'field+=Field'&')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'&'
		public Keyword getAmpersandKeyword_3_0() { return cAmpersandKeyword_3_0; }
		
		//field+=Field
		public Assignment getFieldAssignment_3_1() { return cFieldAssignment_3_1; }
		
		//Field
		public RuleCall getFieldFieldParserRuleCall_3_1_0() { return cFieldFieldParserRuleCall_3_1_0; }
		
		//'&'
		public Keyword getAmpersandKeyword_3_2() { return cAmpersandKeyword_3_2; }
		
		//exp2=Exp?
		public Assignment getExp2Assignment_4() { return cExp2Assignment_4; }
		
		//Exp
		public RuleCall getExp2ExpParserRuleCall_4_0() { return cExp2ExpParserRuleCall_4_0; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ui.Languagedsl.Field");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Field:
		//    name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ui.Languagedsl.Exp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNumberAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNumberINTTerminalRuleCall_2_0 = (RuleCall)cNumberAssignment_2.eContents().get(0);
		private final RuleCall cTextExpParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Exp:
		//    value=STRING |
		//    type=Type |
		//    number=INT |
		//    TextExp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING |
		//type=Type |
		//number=INT |
		//TextExp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=STRING
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_0() { return cValueSTRINGTerminalRuleCall_0_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
		
		//number=INT
		public Assignment getNumberAssignment_2() { return cNumberAssignment_2; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_2_0() { return cNumberINTTerminalRuleCall_2_0; }
		
		//TextExp
		public RuleCall getTextExpParserRuleCall_3() { return cTextExpParserRuleCall_3; }
	}
	public class TextExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ui.Languagedsl.TextExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		
		//TextExp:
		//    '#' exp=Exp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'#' exp=Exp
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//exp=Exp
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_1_0() { return cExpExpParserRuleCall_1_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ui.Languagedsl.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cBooleanKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cNumberKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Type:
		//    'string' | 'boolean' | 'number'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'string' | 'boolean' | 'number'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'string'
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }
		
		//'boolean'
		public Keyword getBooleanKeyword_1() { return cBooleanKeyword_1; }
		
		//'number'
		public Keyword getNumberKeyword_2() { return cNumberKeyword_2; }
	}
	
	
	private final TitleElements pTitle;
	private final FormElements pForm;
	private final ParameterElements pParameter;
	private final FormUseElements pFormUse;
	private final LayoutElements pLayout;
	private final ComponentElements pComponent;
	private final ElementElements pElement;
	private final ButtonElements pButton;
	private final SaveElements pSave;
	private final InputElements pInput;
	private final ReferenceElements pReference;
	private final ConditionElements pCondition;
	private final LabelElements pLabel;
	private final FieldElements pField;
	private final ExpElements pExp;
	private final TextExpElements pTextExp;
	private final TypeElements pType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LanguagedslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTitle = new TitleElements();
		this.pForm = new FormElements();
		this.pParameter = new ParameterElements();
		this.pFormUse = new FormUseElements();
		this.pLayout = new LayoutElements();
		this.pComponent = new ComponentElements();
		this.pElement = new ElementElements();
		this.pButton = new ButtonElements();
		this.pSave = new SaveElements();
		this.pInput = new InputElements();
		this.pReference = new ReferenceElements();
		this.pCondition = new ConditionElements();
		this.pLabel = new LabelElements();
		this.pField = new FieldElements();
		this.pExp = new ExpElements();
		this.pTextExp = new TextExpElements();
		this.pType = new TypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ui.Languagedsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Title:
	//    'title' name=ID form+=Form*
	//    ;
	public TitleElements getTitleAccess() {
		return pTitle;
	}
	
	public ParserRule getTitleRule() {
		return getTitleAccess().getRule();
	}
	
	//Form:
	//    'form' name=ID ('('(param+=Parameter (',' param2+=Parameter)*)?')')? '{' layout+=Layout '}'
	//;
	public FormElements getFormAccess() {
		return pForm;
	}
	
	public ParserRule getFormRule() {
		return getFormAccess().getRule();
	}
	
	//Parameter:
	//    name=ID ':' type=Type
	//;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//FormUse:
	//    name=ID '('(exp=Exp (',' exp2=Exp)?)?')'
	//;
	public FormUseElements getFormUseAccess() {
		return pFormUse;
	}
	
	public ParserRule getFormUseRule() {
		return getFormUseAccess().getRule();
	}
	
	//Layout:
	//    {Layout} ('row' | 'column') '{' component+=Component* '}'
	//;
	public LayoutElements getLayoutAccess() {
		return pLayout;
	}
	
	public ParserRule getLayoutRule() {
		return getLayoutAccess().getRule();
	}
	
	//Component:
	//    layout+=Layout | {Component} element+=Element | formuse+=FormUse
	//;
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	//Element:
	//    label+=Label | input+=Input | button+=Button
	//;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Button:
	//    'button' (save=Save)? name=ID ':' exp=Exp
	//;
	public ButtonElements getButtonAccess() {
		return pButton;
	}
	
	public ParserRule getButtonRule() {
		return getButtonAccess().getRule();
	}
	
	//Save:
	//    '*'
	//;
	public SaveElements getSaveAccess() {
		return pSave;
	}
	
	public ParserRule getSaveRule() {
		return getSaveAccess().getRule();
	}
	
	//Input:
	//    'input' name=ID ':' (exp=Exp condition=Condition? |
	//        ref=[Reference] ('<='|'=='|'!='|'>=') exp=Exp)
	//;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//Reference:
	//    Input | Button | Parameter
	//;
	public ReferenceElements getReferenceAccess() {
		return pReference;
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}
	
	//Condition:
	//    op=('>'|'<'|'<='|'>='|'=='|'!=') (exp=Exp | ref=[Reference])
	//    ('&&' type=Type op2=('>'|'<'|'<='|'>='|'=='|'!=') exp2=Exp)?
	//;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Label:
	//    'label' ':' exp=Exp ('&'field+=Field'&')? exp2=Exp?
	//;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//Field:
	//    name=ID
	//;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//Exp:
	//    value=STRING |
	//    type=Type |
	//    number=INT |
	//    TextExp
	//;
	public ExpElements getExpAccess() {
		return pExp;
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}
	
	//TextExp:
	//    '#' exp=Exp
	//;
	public TextExpElements getTextExpAccess() {
		return pTextExp;
	}
	
	public ParserRule getTextExpRule() {
		return getTextExpAccess().getRule();
	}
	
	//Type:
	//    'string' | 'boolean' | 'number'
	//;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
