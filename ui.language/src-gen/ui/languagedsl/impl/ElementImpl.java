/**
 * generated by Xtext 2.30.0
 */
package ui.languagedsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import ui.languagedsl.Button;
import ui.languagedsl.Element;
import ui.languagedsl.Input;
import ui.languagedsl.Label;
import ui.languagedsl.LanguagedslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Element</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ui.languagedsl.impl.ElementImpl#getLabel <em>Label</em>}</li>
 *   <li>{@link ui.languagedsl.impl.ElementImpl#getInput <em>Input</em>}</li>
 *   <li>{@link ui.languagedsl.impl.ElementImpl#getButton <em>Button</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ElementImpl extends MinimalEObjectImpl.Container implements Element
{
  /**
   * The cached value of the '{@link #getLabel() <em>Label</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLabel()
   * @generated
   * @ordered
   */
  protected EList<Label> label;

  /**
   * The cached value of the '{@link #getInput() <em>Input</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInput()
   * @generated
   * @ordered
   */
  protected EList<Input> input;

  /**
   * The cached value of the '{@link #getButton() <em>Button</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getButton()
   * @generated
   * @ordered
   */
  protected EList<Button> button;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ElementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LanguagedslPackage.Literals.ELEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Label> getLabel()
  {
    if (label == null)
    {
      label = new EObjectContainmentEList<Label>(Label.class, this, LanguagedslPackage.ELEMENT__LABEL);
    }
    return label;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Input> getInput()
  {
    if (input == null)
    {
      input = new EObjectContainmentEList<Input>(Input.class, this, LanguagedslPackage.ELEMENT__INPUT);
    }
    return input;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Button> getButton()
  {
    if (button == null)
    {
      button = new EObjectContainmentEList<Button>(Button.class, this, LanguagedslPackage.ELEMENT__BUTTON);
    }
    return button;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LanguagedslPackage.ELEMENT__LABEL:
        return ((InternalEList<?>)getLabel()).basicRemove(otherEnd, msgs);
      case LanguagedslPackage.ELEMENT__INPUT:
        return ((InternalEList<?>)getInput()).basicRemove(otherEnd, msgs);
      case LanguagedslPackage.ELEMENT__BUTTON:
        return ((InternalEList<?>)getButton()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LanguagedslPackage.ELEMENT__LABEL:
        return getLabel();
      case LanguagedslPackage.ELEMENT__INPUT:
        return getInput();
      case LanguagedslPackage.ELEMENT__BUTTON:
        return getButton();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LanguagedslPackage.ELEMENT__LABEL:
        getLabel().clear();
        getLabel().addAll((Collection<? extends Label>)newValue);
        return;
      case LanguagedslPackage.ELEMENT__INPUT:
        getInput().clear();
        getInput().addAll((Collection<? extends Input>)newValue);
        return;
      case LanguagedslPackage.ELEMENT__BUTTON:
        getButton().clear();
        getButton().addAll((Collection<? extends Button>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LanguagedslPackage.ELEMENT__LABEL:
        getLabel().clear();
        return;
      case LanguagedslPackage.ELEMENT__INPUT:
        getInput().clear();
        return;
      case LanguagedslPackage.ELEMENT__BUTTON:
        getButton().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LanguagedslPackage.ELEMENT__LABEL:
        return label != null && !label.isEmpty();
      case LanguagedslPackage.ELEMENT__INPUT:
        return input != null && !input.isEmpty();
      case LanguagedslPackage.ELEMENT__BUTTON:
        return button != null && !button.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ElementImpl
