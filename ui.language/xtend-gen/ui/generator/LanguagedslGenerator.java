/**
 * generated by Xtext 2.30.0
 */
package ui.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import java.util.Arrays;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import ui.languagedsl.Button;
import ui.languagedsl.Component;
import ui.languagedsl.Condition;
import ui.languagedsl.Element;
import ui.languagedsl.Exp;
import ui.languagedsl.Field;
import ui.languagedsl.Form;
import ui.languagedsl.FormUse;
import ui.languagedsl.Input;
import ui.languagedsl.Label;
import ui.languagedsl.Layout;
import ui.languagedsl.Parameter;
import ui.languagedsl.Reference;
import ui.languagedsl.Title;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class LanguagedslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Title title = Iterators.<Title>filter(resource.getAllContents(), Title.class).next();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("user_interface/");
    String _name = title.getName();
    _builder.append(_name);
    _builder.append("/UserInterface.java");
    fsa.generateFile(_builder.toString(), LanguagedslGenerator.generateInterface(title, resource));
    boolean form = IteratorExtensions.<FormUse>toList(Iterators.<FormUse>filter(resource.getAllContents(), FormUse.class)).isEmpty();
    if ((form == true)) {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("user_interface/");
      String _name_1 = title.getName();
      _builder_1.append(_name_1);
      _builder_1.append("/");
      String _name_2 = title.getName();
      _builder_1.append(_name_2);
      _builder_1.append("Form.java");
      fsa.generateFile(_builder_1.toString(), LanguagedslGenerator.generateForm(title, resource));
    } else {
      List<Form> forms = IteratorExtensions.<Form>toList(Iterators.<Form>filter(resource.getAllContents(), Form.class));
      for (final Form list : forms) {
        StringConcatenation _builder_2 = new StringConcatenation();
        _builder_2.append("user_interface/");
        String _name_3 = title.getName();
        _builder_2.append(_name_3);
        _builder_2.append("/");
        String _name_4 = list.getName();
        _builder_2.append(_name_4);
        _builder_2.append(".java");
        fsa.generateFile(_builder_2.toString(), LanguagedslGenerator.generateForm(list, title));
      }
    }
  }

  public static String generateInterface(final Title title, final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package user_interface.");
    String _name = title.getName();
    _builder.append(_name);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("import javax.swing.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class UserInterface{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public JFrame frame;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void open(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("frame = new JFrame(\"");
    String _name_1 = title.getName();
    _builder.append(_name_1, "\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);");
    _builder.newLine();
    {
      int _length = ((Object[])Conversions.unwrapArray(IterableExtensions.<Form>toList(title.getForm()), Object.class)).length;
      boolean _greaterThan = (_length > 1);
      if (_greaterThan) {
        _builder.append("\t\t");
        String _name_2 = IterableExtensions.<Form>head(title.getForm()).getName();
        _builder.append(_name_2, "\t\t");
        _builder.append(" form = new ");
        String _name_3 = IterableExtensions.<Form>head(title.getForm()).getName();
        _builder.append(_name_3, "\t\t");
        _builder.append("(this);");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("\t\t");
        String _name_4 = title.getName();
        _builder.append(_name_4, "\t\t");
        _builder.append("Form form = new ");
        String _name_5 = title.getName();
        _builder.append(_name_5, "\t\t");
        _builder.append("Form(this);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.append("frame.add(form.createPanel());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("frame.pack();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("frame.setVisible(true);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }

  public static String generateForm(final Form form, final Title title) {
    String _xblockexpression = null;
    {
      List<Layout> layouts = IterableExtensions.<Layout>toList(form.getLayout());
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package user_interface.");
      String _name = title.getName();
      _builder.append(_name);
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.append("import javax.swing.*;");
      _builder.newLine();
      _builder.append("import java.awt.event.*;");
      _builder.newLine();
      _builder.append("import user_interface.common.*;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("public class ");
      String _name_1 = form.getName();
      _builder.append(_name_1);
      _builder.append(" extends Form{");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("UserInterface parent;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("public ");
      String _name_2 = form.getName();
      _builder.append(_name_2);
      _builder.append(" () {");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("public ");
      String _name_3 = form.getName();
      _builder.append(_name_3);
      _builder.append("(UserInterface userInterface){");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      {
        EList<Parameter> _param = form.getParam();
        for(final Parameter param : _param) {
          {
            EList<Parameter> _param2 = form.getParam2();
            for(final Parameter param2 : _param2) {
              {
                if ((((param2 != null) && Objects.equal(param2.getType(), "number")) && Objects.equal(param.getType(), "number"))) {
                  _builder.newLine();
                  _builder.append("public ");
                  String _name_4 = form.getName();
                  _builder.append(_name_4);
                  _builder.append("(UserInterface user, int i, int j){");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t");
                  _builder.newLine();
                  _builder.append("}\t\t");
                } else {
                  if ((((param2 != null) && Objects.equal(param2.getType(), "string")) && Objects.equal(param.getType(), "string"))) {
                    _builder.newLineIfNotEmpty();
                    _builder.newLine();
                    _builder.append("public ");
                    String _name_5 = form.getName();
                    _builder.append(_name_5);
                    _builder.append("(UserInterface user, String string1, String string2){");
                    _builder.newLineIfNotEmpty();
                    _builder.newLine();
                    _builder.append("}\t");
                    _builder.newLine();
                  } else {
                    if ((((param2 != null) && Objects.equal(param2.getType(), "string")) && Objects.equal(param.getType(), "number"))) {
                      _builder.newLine();
                      _builder.append("public ");
                      String _name_6 = form.getName();
                      _builder.append(_name_6);
                      _builder.append("(UserInterface user, String string, int i){");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.newLine();
                      _builder.append("}\t\t");
                      _builder.newLine();
                    } else {
                      if ((((param2 != null) && Objects.equal(param2.getType(), "number")) && Objects.equal(param.getType(), "string"))) {
                        _builder.newLine();
                        _builder.append("public ");
                        String _name_7 = form.getName();
                        _builder.append(_name_7);
                        _builder.append("(UserInterface user, int i, String string){");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.newLine();
                        _builder.append("}\t\t\t");
                        _builder.newLine();
                      } else {
                        if (((param2 == null) && Objects.equal(param.getType(), "string"))) {
                          _builder.newLine();
                          _builder.append("public ");
                          String _name_8 = form.getName();
                          _builder.append(_name_8);
                          _builder.append("(UserInterface user, String string){");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          _builder.newLine();
                          _builder.append("}\t\t");
                        } else {
                          if (((param2 == null) && Objects.equal(param.getType(), "number"))) {
                            _builder.newLineIfNotEmpty();
                            _builder.newLine();
                            _builder.append("public ");
                            String _name_9 = form.getName();
                            _builder.append(_name_9);
                            _builder.append("(UserInterface user, int i){");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t");
                            _builder.newLine();
                            _builder.append("}\t\t");
                          }
                        }
                      }
                    }
                  }
                }
              }
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
      _builder.newLine();
      {
        for(final Layout layout : layouts) {
          {
            EList<Component> _component = layout.getComponent();
            for(final Component component : _component) {
              {
                EList<Element> _element = component.getElement();
                for(final Element element : _element) {
                  {
                    EList<Input> _input = element.getInput();
                    for(final Input input : _input) {
                      _builder.newLine();
                      _builder.append("public JTextField ");
                      String _name_10 = input.getName();
                      _builder.append(_name_10);
                      _builder.append("Component;");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  {
                    EList<Button> _button = element.getButton();
                    for(final Button button : _button) {
                      _builder.newLine();
                      _builder.append("public JButton ");
                      String _name_11 = button.getName();
                      _builder.append(_name_11);
                      _builder.append("Component;");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  _builder.newLine();
                }
              }
            }
          }
        }
      }
      {
        for(final Layout layout_1 : layouts) {
          {
            EList<Component> _component_1 = layout_1.getComponent();
            for(final Component component_1 : _component_1) {
              {
                EList<FormUse> _formuse = component_1.getFormuse();
                for(final FormUse formuse : _formuse) {
                  {
                    if ((((formuse.getExp2() != null) && (!Integer.valueOf(formuse.getExp2().getNumber()).toString().isBlank())) && (!Integer.valueOf(formuse.getExp().getNumber()).toString().isBlank()))) {
                      _builder.append("public ");
                      String _name_12 = form.getName();
                      _builder.append(_name_12);
                      _builder.append("(UserInterface parent");
                      int _indexOf = component_1.getFormuse().indexOf(formuse);
                      _builder.append(_indexOf);
                      _builder.append(", int x, int y){");
                      _builder.newLineIfNotEmpty();
                      _builder.newLine();
                      _builder.append("}\t\t");
                      _builder.newLine();
                    } else {
                      if ((((formuse.getExp2() == null) && (formuse.getExp() != null)) && (!LanguagedslGenerator.show(formuse.getExp()).isBlank()))) {
                        _builder.append("public ");
                        String _name_13 = form.getName();
                        _builder.append(_name_13);
                        _builder.append("(UserInterface parent");
                        int _indexOf_1 = component_1.getFormuse().indexOf(formuse);
                        _builder.append(_indexOf_1);
                        _builder.append(", String string){");
                        _builder.newLineIfNotEmpty();
                        _builder.newLine();
                        _builder.append("}");
                        _builder.newLine();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      _builder.append("\t");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public void ");
      String _name_14 = form.getName();
      _builder.append(_name_14, "\t");
      _builder.append("Form(UserInterface parent){");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("this.parent = parent;");
      _builder.newLine();
      {
        for(final Layout layout_2 : layouts) {
          {
            EList<Component> _component_2 = layout_2.getComponent();
            for(final Component component_2 : _component_2) {
              {
                EList<Element> _element_1 = component_2.getElement();
                for(final Element element_1 : _element_1) {
                  {
                    EList<Input> _input_1 = element_1.getInput();
                    for(final Input input_1 : _input_1) {
                      _builder.newLine();
                      String _name_15 = input_1.getName();
                      _builder.append(_name_15);
                      _builder.append("Component = new JTextFIeld();");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  {
                    EList<Button> _button_1 = element_1.getButton();
                    for(final Button button_1 : _button_1) {
                      _builder.newLine();
                      String _name_16 = button_1.getName();
                      _builder.append(_name_16);
                      _builder.append("Component = new JButton(\"");
                      String _show = LanguagedslGenerator.show(button_1.getExp());
                      _builder.append(_show);
                      _builder.append("\");");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
            }
          }
        }
      }
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public JPanel createPanel(){");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return createPanel0();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      {
        for(final Layout layout_3 : layouts) {
          _builder.append("\t");
          _builder.append("public JPanel createPanel");
          int _indexOf_2 = layouts.indexOf(layout_3);
          _builder.append(_indexOf_2, "\t");
          _builder.append("() {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("\t");
          _builder.append("JPanel panel = new JPanel();");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("\t");
          _builder.append("panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));");
          _builder.newLine();
          {
            EList<Component> _component_3 = layout_3.getComponent();
            for(final Component component_3 : _component_3) {
              {
                EList<FormUse> _formuse_1 = component_3.getFormuse();
                for(final FormUse formuse_1 : _formuse_1) {
                  _builder.append("\t");
                  _builder.append("\t");
                  String _show_1 = LanguagedslGenerator.show(formuse_1);
                  _builder.append(_show_1, "\t\t");
                  _builder.newLineIfNotEmpty();
                }
              }
              {
                EList<Element> _element_2 = component_3.getElement();
                for(final Element elem : _element_2) {
                  {
                    EList<Label> _label = elem.getLabel();
                    for(final Label label : _label) {
                      _builder.append("\t");
                      _builder.append("\t");
                      String _show_2 = LanguagedslGenerator.show(label);
                      _builder.append(_show_2, "\t\t");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  {
                    EList<Input> _input_2 = elem.getInput();
                    for(final Input input_2 : _input_2) {
                      _builder.append("\t");
                      _builder.append("\t");
                      String _show_3 = LanguagedslGenerator.show(input_2);
                      _builder.append(_show_3, "\t\t");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  {
                    EList<Button> _button_2 = elem.getButton();
                    for(final Button button_2 : _button_2) {
                      _builder.append("\t");
                      _builder.append("\t");
                      String _show_4 = LanguagedslGenerator.show(button_2);
                      _builder.append(_show_4, "\t\t");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
            }
          }
        }
      }
      _builder.append("\t\t");
      _builder.append("return panel;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public boolean checkValidity(){");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return true;\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}\t\t\t\t\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _xblockexpression = _builder.toString();
    }
    return _xblockexpression;
  }

  public static String generateForm(final Title title, final Resource resource) {
    String _xblockexpression = null;
    {
      boolean inputs = IteratorExtensions.<Input>toList(Iterators.<Input>filter(resource.getAllContents(), Input.class)).isEmpty();
      boolean buttons = IteratorExtensions.<Button>toList(Iterators.<Button>filter(resource.getAllContents(), Button.class)).isEmpty();
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package user_interface.");
      String _name = title.getName();
      _builder.append(_name);
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.append("import javax.swing.*;");
      _builder.newLine();
      _builder.append("import java.awt.event.*;");
      _builder.newLine();
      _builder.append("import user_interface.common.*;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("public class ");
      String _name_1 = title.getName();
      _builder.append(_name_1);
      _builder.append("Form extends Form{");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("UserInterface parent;");
      _builder.newLine();
      {
        if ((Boolean.valueOf(inputs) == Boolean.valueOf(false))) {
          {
            List<Input> _list = IteratorExtensions.<Input>toList(Iterators.<Input>filter(resource.getAllContents(), Input.class));
            for(final Input input : _list) {
              _builder.newLine();
              _builder.append("public JTextField ");
              String _name_2 = input.getName();
              _builder.append(_name_2);
              _builder.append("Component;");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
      {
        if ((Boolean.valueOf(buttons) == Boolean.valueOf(false))) {
          {
            List<Button> _list_1 = IteratorExtensions.<Button>toList(Iterators.<Button>filter(resource.getAllContents(), Button.class));
            for(final Button button : _list_1) {
              _builder.newLine();
              _builder.append("public JButton ");
              String _name_3 = button.getName();
              _builder.append(_name_3);
              _builder.append("Component;");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      String _name_4 = title.getName();
      _builder.append(_name_4, "\t");
      _builder.append("Form(UserInterface parent){");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("this.parent = parent;");
      _builder.newLine();
      {
        if ((Boolean.valueOf(buttons) == Boolean.valueOf(false))) {
          {
            List<Button> _list_2 = IteratorExtensions.<Button>toList(Iterators.<Button>filter(resource.getAllContents(), Button.class));
            for(final Button button_1 : _list_2) {
              String _name_5 = button_1.getName();
              _builder.append(_name_5);
              _builder.append("Component = new JButton(\"");
              String _show = LanguagedslGenerator.show(button_1.getExp());
              _builder.append(_show);
              _builder.append("\");");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
      {
        if ((Boolean.valueOf(inputs) == Boolean.valueOf(false))) {
          {
            List<Input> _list_3 = IteratorExtensions.<Input>toList(Iterators.<Input>filter(resource.getAllContents(), Input.class));
            for(final Input input_1 : _list_3) {
              _builder.append("\t\t");
              String _name_6 = input_1.getName();
              _builder.append(_name_6, "\t\t");
              _builder.append("Component = new JTextField();");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public JPanel createPanel(){");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("return createPanel0();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      {
        EList<Form> _form = title.getForm();
        for(final Form form : _form) {
          _builder.append("\t");
          _builder.append("public JPanel createPanel");
          int _indexOf = title.getForm().indexOf(form);
          _builder.append(_indexOf, "\t");
          _builder.append("() {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("\t");
          _builder.append("JPanel panel = new JPanel();");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("\t");
          _builder.append("panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));");
          _builder.newLine();
          {
            EList<Layout> _layout = form.getLayout();
            for(final Layout layout : _layout) {
              {
                EList<Component> _component = layout.getComponent();
                for(final Component component : _component) {
                  {
                    boolean _isEmpty = component.getLayout().isEmpty();
                    if (_isEmpty) {
                      {
                        EList<Element> _element = component.getElement();
                        for(final Element element : _element) {
                          {
                            EList<Label> _label = element.getLabel();
                            for(final Label label : _label) {
                              _builder.append("\t");
                              _builder.append("\t");
                              String _show_1 = LanguagedslGenerator.show(label);
                              _builder.append(_show_1, "\t\t");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                          {
                            EList<Input> _input = element.getInput();
                            for(final Input input_2 : _input) {
                              _builder.append("\t");
                              _builder.append("\t");
                              String _show_2 = LanguagedslGenerator.show(input_2);
                              _builder.append(_show_2, "\t\t");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                          {
                            EList<Button> _button = element.getButton();
                            for(final Button button_2 : _button) {
                              _builder.append("\t");
                              _builder.append("\t");
                              String _show_3 = LanguagedslGenerator.show(button_2);
                              _builder.append(_show_3, "\t\t");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                    } else {
                      {
                        EList<Layout> _layout_1 = component.getLayout();
                        for(final Layout lay : _layout_1) {
                          _builder.newLine();
                          _builder.append("panel.add(createPanel");
                          int _indexOf_1 = layout.getComponent().indexOf(component);
                          int _plus = (_indexOf_1 + 1);
                          _builder.append(_plus);
                          _builder.append("());");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                      {
                        EList<Element> _element_1 = component.getElement();
                        for(final Element element_1 : _element_1) {
                          {
                            EList<Label> _label_1 = element_1.getLabel();
                            for(final Label label_1 : _label_1) {
                              _builder.append("\t");
                              _builder.append("\t");
                              String _show_4 = LanguagedslGenerator.show(label_1);
                              _builder.append(_show_4, "\t\t");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      _builder.append("\t");
      _builder.append("return panel;");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      {
        EList<Form> _form_1 = title.getForm();
        for(final Form form_1 : _form_1) {
          {
            EList<Layout> _layout_2 = form_1.getLayout();
            for(final Layout layout_1 : _layout_2) {
              {
                EList<Component> _component_1 = layout_1.getComponent();
                for(final Component component_1 : _component_1) {
                  {
                    EList<Layout> _layout_3 = component_1.getLayout();
                    for(final Layout lay_1 : _layout_3) {
                      {
                        boolean _isEmpty_1 = component_1.getLayout().isEmpty();
                        boolean _not = (!_isEmpty_1);
                        if (_not) {
                          _builder.newLine();
                          _builder.append("public JPanel createPanel");
                          int _indexOf_2 = layout_1.getComponent().indexOf(component_1);
                          int _plus_1 = (_indexOf_2 + 1);
                          _builder.append(_plus_1);
                          _builder.append("() {");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          _builder.append("JPanel panel = new JPanel();");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));");
                          _builder.newLine();
                          {
                            EList<Component> _component_2 = lay_1.getComponent();
                            for(final Component layer : _component_2) {
                              {
                                EList<Element> _element_2 = layer.getElement();
                                for(final Element elem : _element_2) {
                                  {
                                    EList<Label> _label_2 = elem.getLabel();
                                    for(final Label label_2 : _label_2) {
                                      _builder.append("\t\t\t\t\t");
                                      String _show_5 = LanguagedslGenerator.show(label_2);
                                      _builder.append(_show_5, "\t\t\t\t\t");
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                  {
                                    EList<Input> _input_1 = elem.getInput();
                                    for(final Input input_3 : _input_1) {
                                      _builder.append("\t\t\t\t\t");
                                      String _show_6 = LanguagedslGenerator.show(input_3);
                                      _builder.append(_show_6, "\t\t\t\t\t");
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                  {
                                    EList<Button> _button_1 = elem.getButton();
                                    for(final Button button_3 : _button_1) {
                                      _builder.append("\t\t\t\t\t");
                                      String _show_7 = LanguagedslGenerator.show(button_3);
                                      _builder.append(_show_7, "\t\t\t\t\t");
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                }
                              }
                            }
                          }
                          _builder.append("\t");
                          _builder.append("return panel;");
                          _builder.newLine();
                          _builder.append("}\t\t\t\t");
                        }
                      }
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
            }
          }
        }
      }
      _builder.append("\t");
      _builder.append("public boolean checkValidity(){");
      _builder.newLine();
      {
        if ((Boolean.valueOf(inputs) == Boolean.valueOf(false))) {
          {
            List<Input> _list_4 = IteratorExtensions.<Input>toList(Iterators.<Input>filter(resource.getAllContents(), Input.class));
            for(final Input input_4 : _list_4) {
              {
                String _type = input_4.getExp().getType();
                boolean _equals = Objects.equal(_type, "#string");
                if (_equals) {
                  _builder.append("\t");
                  _builder.append("String\t");
                  String _name_7 = input_4.getName();
                  _builder.append(_name_7, "\t");
                  _builder.append(" = this.");
                  String _name_8 = input_4.getName();
                  _builder.append(_name_8, "\t");
                  _builder.append("Component.getText();");
                  _builder.newLineIfNotEmpty();
                  {
                    Condition _condition = input_4.getCondition();
                    boolean _tripleNotEquals = (_condition != null);
                    if (_tripleNotEquals) {
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("if(!(");
                      String _name_9 = input_4.getName();
                      _builder.append(_name_9, "\t\t");
                      _builder.append(".length() ");
                      String _op = input_4.getCondition().getOp();
                      _builder.append(_op, "\t\t");
                      _builder.append(" ");
                      Exp _exp = input_4.getCondition().getExp();
                      _builder.append(_exp, "\t\t");
                      _builder.append(")){");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("return false;");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("}");
                      _builder.newLine();
                    }
                  }
                  {
                    Reference _ref = input_4.getRef();
                    boolean _tripleNotEquals_1 = (_ref != null);
                    if (_tripleNotEquals_1) {
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("if (!(");
                      String _name_10 = input_4.getRef().getName();
                      _builder.append(_name_10, "\t\t");
                      _builder.append(").equals(");
                      String _name_11 = input_4.getName();
                      _builder.append(_name_11, "\t\t");
                      _builder.append(")){");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("return false;\t");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("}");
                      _builder.newLine();
                    }
                  }
                } else {
                  String _type_1 = input_4.getExp().getType();
                  boolean _equals_1 = Objects.equal(_type_1, "string");
                  if (_equals_1) {
                    _builder.append("\t");
                    _builder.append("String\t");
                    String _name_12 = input_4.getName();
                    _builder.append(_name_12, "\t");
                    _builder.append(" = this.");
                    String _name_13 = input_4.getName();
                    _builder.append(_name_13, "\t");
                    _builder.append("Component.getText();");
                    _builder.newLineIfNotEmpty();
                    {
                      Condition _condition_1 = input_4.getCondition();
                      boolean _tripleNotEquals_2 = (_condition_1 != null);
                      if (_tripleNotEquals_2) {
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("if(!(");
                        String _name_14 = input_4.getName();
                        _builder.append(_name_14, "\t\t");
                        _builder.append(".length() ");
                        String _op_1 = input_4.getCondition().getOp();
                        _builder.append(_op_1, "\t\t");
                        _builder.append(" ");
                        String _type_2 = input_4.getCondition().getType();
                        _builder.append(_type_2, "\t\t");
                        _builder.append(")){");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("return false;");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("}");
                        _builder.newLine();
                      }
                    }
                    _builder.append("\t");
                    _builder.newLine();
                  } else {
                    String _type_3 = input_4.getExp().getType();
                    boolean _equals_2 = Objects.equal(_type_3, "number");
                    if (_equals_2) {
                      _builder.append("\t");
                      _builder.append("int ");
                      String _name_15 = input_4.getName();
                      _builder.append(_name_15, "\t");
                      _builder.append(" = 0;");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("try { ");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t ");
                      String _name_16 = input_4.getName();
                      _builder.append(_name_16, "\t\t ");
                      _builder.append(" = Integer.parseInt(this.");
                      String _name_17 = input_4.getName();
                      _builder.append(_name_17, "\t\t ");
                      _builder.append("Component.getText());");
                      _builder.newLineIfNotEmpty();
                      {
                        if (((input_4.getCondition() != null) && (input_4.getCondition().getOp2() != null))) {
                          _builder.append("\t");
                          _builder.append("\t ");
                          _builder.append("if(!((");
                          String _name_18 = input_4.getName();
                          _builder.append(_name_18, "\t\t ");
                          _builder.append(" ");
                          String _op_2 = input_4.getCondition().getOp();
                          _builder.append(_op_2, "\t\t ");
                          _builder.append(" ");
                          int _number = input_4.getCondition().getExp().getNumber();
                          _builder.append(_number, "\t\t ");
                          _builder.append(") && (");
                          String _name_19 = input_4.getName();
                          _builder.append(_name_19, "\t\t ");
                          _builder.append(" ");
                          String _op2 = input_4.getCondition().getOp2();
                          _builder.append(_op2, "\t\t ");
                          _builder.append(" ");
                          int _number_1 = input_4.getCondition().getExp2().getNumber();
                          _builder.append(_number_1, "\t\t ");
                          _builder.append("))){");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          _builder.append("\t ");
                          _builder.append("\t");
                          _builder.append("return false;");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("\t ");
                          _builder.append("}");
                          _builder.newLine();
                        }
                      }
                      {
                        if (((input_4.getCondition() != null) && (input_4.getCondition().getOp2() == null))) {
                          _builder.append("\t");
                          _builder.append("\t ");
                          _builder.append("if(!((");
                          String _name_20 = input_4.getName();
                          _builder.append(_name_20, "\t\t ");
                          _builder.append(" ");
                          String _op_3 = input_4.getCondition().getOp();
                          _builder.append(_op_3, "\t\t ");
                          _builder.append(" ");
                          int _number_2 = input_4.getCondition().getExp().getNumber();
                          _builder.append(_number_2, "\t\t ");
                          _builder.append("))){");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          _builder.append("\t ");
                          _builder.append("\t");
                          _builder.append("return false;\t");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("\t ");
                          _builder.append("}");
                          _builder.newLine();
                        }
                      }
                      _builder.append("\t");
                      _builder.append("} catch (Exception ex){");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("return false;");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("}\t");
                      _builder.newLine();
                    } else {
                      String _type_4 = input_4.getExp().getType();
                      boolean _equals_3 = Objects.equal(_type_4, "boolean");
                      if (_equals_3) {
                        _builder.append("\t");
                        _builder.append("boolean ");
                        String _name_21 = input_4.getName();
                        _builder.append(_name_21, "\t");
                        _builder.append(" = this.");
                        String _name_22 = input_4.getName();
                        _builder.append(_name_22, "\t");
                        _builder.append("Component.getText();");
                        _builder.newLineIfNotEmpty();
                      } else {
                        _builder.append("\t");
                        _builder.append("String ");
                        String _name_23 = input_4.getName();
                        _builder.append(_name_23, "\t");
                        _builder.append(" = this.");
                        String _name_24 = input_4.getName();
                        _builder.append(_name_24, "\t");
                        _builder.append("Component.getText();");
                        _builder.newLineIfNotEmpty();
                        {
                          Reference _ref_1 = input_4.getRef();
                          boolean _tripleNotEquals_3 = (_ref_1 != null);
                          if (_tripleNotEquals_3) {
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("if (!(");
                            String _name_25 = input_4.getRef().getName();
                            _builder.append(_name_25, "\t\t");
                            _builder.append(").equals(");
                            String _name_26 = input_4.getName();
                            _builder.append(_name_26, "\t\t");
                            _builder.append(")){");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("return false;\t");
                            _builder.newLine();
                            _builder.append("\t");
                            _builder.append("\t");
                            _builder.append("}");
                            _builder.newLine();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _builder.append("\t");
          _builder.newLine();
          {
            List<Input> _list_5 = IteratorExtensions.<Input>toList(Iterators.<Input>filter(resource.getAllContents(), Input.class));
            for(final Input input_5 : _list_5) {
              {
                Reference _ref_2 = input_5.getRef();
                boolean _tripleNotEquals_4 = (_ref_2 != null);
                if (_tripleNotEquals_4) {
                  _builder.append("\t");
                  _builder.append("if (!(");
                  String _name_27 = input_5.getRef().getName();
                  _builder.append(_name_27, "\t");
                  _builder.append(").equals(");
                  String _name_28 = input_5.getName();
                  _builder.append(_name_28, "\t");
                  _builder.append(")){");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("\t\t");
                  _builder.append("return false;\t");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("\t");
                  _builder.append("}");
                  _builder.newLine();
                }
              }
            }
          }
        }
      }
      _builder.append("\t\t");
      _builder.append("return true;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}\t\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder.toString();
    }
    return _xblockexpression;
  }

  protected static String _show(final Exp exp) {
    return exp.getValue();
  }

  protected static String _show(final Label label) {
    String _xblockexpression = null;
    {
      List<Field> fields = IterableExtensions.<Field>toList(label.getField());
      StringConcatenation _builder = new StringConcatenation();
      {
        for(final Field field : fields) {
          {
            if (((label.getExp2() != null) && (!LanguagedslGenerator.show(label.getExp2()).isBlank()))) {
              _builder.append("String ");
              String _name = field.getName();
              _builder.append(_name);
              _builder.append(" = \"\";");
              _builder.newLineIfNotEmpty();
              _builder.append("panel.add(new JLabel(((\"");
              String _show = LanguagedslGenerator.show(label.getExp());
              _builder.append(_show);
              _builder.append("\"+ ");
              String _name_1 = field.getName();
              _builder.append(_name_1);
              _builder.append(")+\"");
              String _show_1 = LanguagedslGenerator.show(label.getExp2());
              _builder.append(_show_1);
              _builder.append("\")));");
              _builder.newLineIfNotEmpty();
            } else {
              _builder.append("panel.add(new JLabel(\"");
              String _show_2 = LanguagedslGenerator.show(label.getExp());
              _builder.append(_show_2);
              _builder.append("\"));");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
      _builder.newLine();
      _xblockexpression = _builder.toString();
    }
    return _xblockexpression;
  }

  protected static String _show(final Input input) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("panel.add(");
    String _name = input.getName();
    _builder.append(_name);
    _builder.append("Component);");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }

  protected static String _show(final Button button) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("panel.add(");
    String _name = button.getName();
    _builder.append(_name);
    _builder.append("Component);");
    _builder.newLineIfNotEmpty();
    {
      String _save = button.getSave();
      boolean _tripleNotEquals = (_save != null);
      if (_tripleNotEquals) {
        String _name_1 = button.getName();
        _builder.append(_name_1);
        _builder.append("Component.addActionListener(new ActionListener(){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("public void actionPerformed(ActionEvent e){");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("if(checkValidity()){");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("JOptionPane.showMessageDialog(");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("parent.frame,");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\"Data has been ");
        String _name_2 = button.getName();
        _builder.append(_name_2, "\t\t\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("else {");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("JOptionPane.showMessageDialog(");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("parent.frame,");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\"Validation error\",");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\"Error\",");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("JOptionPane.ERROR_MESSAGE);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("});");
        _builder.newLine();
      }
    }
    return _builder.toString();
  }

  protected static String _show(final FormUse formuse) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((((formuse.getExp2() == null) && (formuse.getExp() != null)) && (!formuse.getExp().getValue().isEmpty()))) {
        String _name = formuse.getName();
        _builder.append(_name);
        _builder.append(" ");
        String _name_1 = formuse.getName();
        _builder.append(_name_1);
        _builder.append(" = new ");
        String _name_2 = formuse.getName();
        _builder.append(_name_2);
        _builder.append("(parent, \"");
        String _value = formuse.getExp().getValue();
        _builder.append(_value);
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
      } else {
        if ((((formuse.getExp2() != null) && (!Integer.valueOf(formuse.getExp().getNumber()).toString().isBlank())) && (!Integer.valueOf(formuse.getExp2().getNumber()).toString().isBlank()))) {
          String _name_3 = formuse.getName();
          _builder.append(_name_3);
          _builder.append(" ");
          String _name_4 = formuse.getName();
          _builder.append(_name_4);
          _builder.append(" = new ");
          String _name_5 = formuse.getName();
          _builder.append(_name_5);
          _builder.append("(parent, ");
          int _number = formuse.getExp().getNumber();
          _builder.append(_number);
          _builder.append(", ");
          int _number_1 = formuse.getExp2().getNumber();
          _builder.append(_number_1);
          _builder.append(");");
          _builder.newLineIfNotEmpty();
        } else {
          String _name_6 = formuse.getName();
          _builder.append(_name_6);
          _builder.append(" ");
          String _name_7 = formuse.getName();
          _builder.append(_name_7);
          _builder.append(" = new ");
          String _name_8 = formuse.getName();
          _builder.append(_name_8);
          _builder.append("();");
          _builder.newLineIfNotEmpty();
        }
      }
    }
    _builder.append("panel.add(");
    String _name_9 = formuse.getName();
    _builder.append(_name_9);
    _builder.append(".createPanel());");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }

  public static String show(final EObject button) {
    if (button instanceof Button) {
      return _show((Button)button);
    } else if (button instanceof Input) {
      return _show((Input)button);
    } else if (button instanceof Exp) {
      return _show((Exp)button);
    } else if (button instanceof FormUse) {
      return _show((FormUse)button);
    } else if (button instanceof Label) {
      return _show((Label)button);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(button).toString());
    }
  }
}
