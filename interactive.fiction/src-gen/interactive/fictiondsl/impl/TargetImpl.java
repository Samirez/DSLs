/**
 * generated by Xtext 2.30.0
 */
package interactive.fictiondsl.impl;

import interactive.fictiondsl.Expression;
import interactive.fictiondsl.External;
import interactive.fictiondsl.FictiondslPackage;
import interactive.fictiondsl.SomeRef;
import interactive.fictiondsl.Target;
import interactive.fictiondsl.VarDef;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Target</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link interactive.fictiondsl.impl.TargetImpl#getRef <em>Ref</em>}</li>
 *   <li>{@link interactive.fictiondsl.impl.TargetImpl#getExref <em>Exref</em>}</li>
 *   <li>{@link interactive.fictiondsl.impl.TargetImpl#getVardef <em>Vardef</em>}</li>
 *   <li>{@link interactive.fictiondsl.impl.TargetImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link interactive.fictiondsl.impl.TargetImpl#getRes <em>Res</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TargetImpl extends MinimalEObjectImpl.Container implements Target
{
  /**
   * The cached value of the '{@link #getRef() <em>Ref</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRef()
   * @generated
   * @ordered
   */
  protected SomeRef ref;

  /**
   * The cached value of the '{@link #getExref() <em>Exref</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExref()
   * @generated
   * @ordered
   */
  protected External exref;

  /**
   * The cached value of the '{@link #getVardef() <em>Vardef</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVardef()
   * @generated
   * @ordered
   */
  protected VarDef vardef;

  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected Expression condition;

  /**
   * The cached value of the '{@link #getRes() <em>Res</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRes()
   * @generated
   * @ordered
   */
  protected Expression res;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TargetImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FictiondslPackage.Literals.TARGET;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SomeRef getRef()
  {
    if (ref != null && ref.eIsProxy())
    {
      InternalEObject oldRef = (InternalEObject)ref;
      ref = (SomeRef)eResolveProxy(oldRef);
      if (ref != oldRef)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, FictiondslPackage.TARGET__REF, oldRef, ref));
      }
    }
    return ref;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SomeRef basicGetRef()
  {
    return ref;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRef(SomeRef newRef)
  {
    SomeRef oldRef = ref;
    ref = newRef;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FictiondslPackage.TARGET__REF, oldRef, ref));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public External getExref()
  {
    if (exref != null && exref.eIsProxy())
    {
      InternalEObject oldExref = (InternalEObject)exref;
      exref = (External)eResolveProxy(oldExref);
      if (exref != oldExref)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, FictiondslPackage.TARGET__EXREF, oldExref, exref));
      }
    }
    return exref;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public External basicGetExref()
  {
    return exref;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExref(External newExref)
  {
    External oldExref = exref;
    exref = newExref;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FictiondslPackage.TARGET__EXREF, oldExref, exref));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarDef getVardef()
  {
    if (vardef != null && vardef.eIsProxy())
    {
      InternalEObject oldVardef = (InternalEObject)vardef;
      vardef = (VarDef)eResolveProxy(oldVardef);
      if (vardef != oldVardef)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, FictiondslPackage.TARGET__VARDEF, oldVardef, vardef));
      }
    }
    return vardef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VarDef basicGetVardef()
  {
    return vardef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVardef(VarDef newVardef)
  {
    VarDef oldVardef = vardef;
    vardef = newVardef;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FictiondslPackage.TARGET__VARDEF, oldVardef, vardef));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCondition(Expression newCondition, NotificationChain msgs)
  {
    Expression oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FictiondslPackage.TARGET__CONDITION, oldCondition, newCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCondition(Expression newCondition)
  {
    if (newCondition != condition)
    {
      NotificationChain msgs = null;
      if (condition != null)
        msgs = ((InternalEObject)condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FictiondslPackage.TARGET__CONDITION, null, msgs);
      if (newCondition != null)
        msgs = ((InternalEObject)newCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FictiondslPackage.TARGET__CONDITION, null, msgs);
      msgs = basicSetCondition(newCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FictiondslPackage.TARGET__CONDITION, newCondition, newCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getRes()
  {
    return res;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRes(Expression newRes, NotificationChain msgs)
  {
    Expression oldRes = res;
    res = newRes;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FictiondslPackage.TARGET__RES, oldRes, newRes);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRes(Expression newRes)
  {
    if (newRes != res)
    {
      NotificationChain msgs = null;
      if (res != null)
        msgs = ((InternalEObject)res).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FictiondslPackage.TARGET__RES, null, msgs);
      if (newRes != null)
        msgs = ((InternalEObject)newRes).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FictiondslPackage.TARGET__RES, null, msgs);
      msgs = basicSetRes(newRes, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FictiondslPackage.TARGET__RES, newRes, newRes));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FictiondslPackage.TARGET__CONDITION:
        return basicSetCondition(null, msgs);
      case FictiondslPackage.TARGET__RES:
        return basicSetRes(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FictiondslPackage.TARGET__REF:
        if (resolve) return getRef();
        return basicGetRef();
      case FictiondslPackage.TARGET__EXREF:
        if (resolve) return getExref();
        return basicGetExref();
      case FictiondslPackage.TARGET__VARDEF:
        if (resolve) return getVardef();
        return basicGetVardef();
      case FictiondslPackage.TARGET__CONDITION:
        return getCondition();
      case FictiondslPackage.TARGET__RES:
        return getRes();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FictiondslPackage.TARGET__REF:
        setRef((SomeRef)newValue);
        return;
      case FictiondslPackage.TARGET__EXREF:
        setExref((External)newValue);
        return;
      case FictiondslPackage.TARGET__VARDEF:
        setVardef((VarDef)newValue);
        return;
      case FictiondslPackage.TARGET__CONDITION:
        setCondition((Expression)newValue);
        return;
      case FictiondslPackage.TARGET__RES:
        setRes((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FictiondslPackage.TARGET__REF:
        setRef((SomeRef)null);
        return;
      case FictiondslPackage.TARGET__EXREF:
        setExref((External)null);
        return;
      case FictiondslPackage.TARGET__VARDEF:
        setVardef((VarDef)null);
        return;
      case FictiondslPackage.TARGET__CONDITION:
        setCondition((Expression)null);
        return;
      case FictiondslPackage.TARGET__RES:
        setRes((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FictiondslPackage.TARGET__REF:
        return ref != null;
      case FictiondslPackage.TARGET__EXREF:
        return exref != null;
      case FictiondslPackage.TARGET__VARDEF:
        return vardef != null;
      case FictiondslPackage.TARGET__CONDITION:
        return condition != null;
      case FictiondslPackage.TARGET__RES:
        return res != null;
    }
    return super.eIsSet(featureID);
  }

} //TargetImpl
