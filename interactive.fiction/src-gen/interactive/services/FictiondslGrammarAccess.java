/*
 * generated by Xtext 2.30.0
 */
package interactive.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FictiondslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class StoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "interactive.Fictiondsl.Story");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cExternalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExternalExternalParserRuleCall_2_0 = (RuleCall)cExternalAssignment_2.eContents().get(0);
		private final Assignment cScenarioAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScenarioScenarioParserRuleCall_3_0 = (RuleCall)cScenarioAssignment_3.eContents().get(0);
		
		//Story:
		//    'story' name=ID external+=External* scenario+=Scenario*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'story' name=ID external+=External* scenario+=Scenario*
		public Group getGroup() { return cGroup; }
		
		//'story'
		public Keyword getStoryKeyword_0() { return cStoryKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//external+=External*
		public Assignment getExternalAssignment_2() { return cExternalAssignment_2; }
		
		//External
		public RuleCall getExternalExternalParserRuleCall_2_0() { return cExternalExternalParserRuleCall_2_0; }
		
		//scenario+=Scenario*
		public Assignment getScenarioAssignment_3() { return cScenarioAssignment_3; }
		
		//Scenario
		public RuleCall getScenarioScenarioParserRuleCall_3_0() { return cScenarioScenarioParserRuleCall_3_0; }
	}
	public class ExternalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "interactive.Fictiondsl.External");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cResultAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cResultTypeParserRuleCall_6_0 = (RuleCall)cResultAssignment_6.eContents().get(0);
		
		//External:
		//    'function' name=ID '('type=Type')' ':' result=Type
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' name=ID '('type=Type')' ':' result=Type
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//result=Type
		public Assignment getResultAssignment_6() { return cResultAssignment_6; }
		
		//Type
		public RuleCall getResultTypeParserRuleCall_6_0() { return cResultTypeParserRuleCall_6_0; }
	}
	public class ScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "interactive.Fictiondsl.Scenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScenarioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVarAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVarVarDefParserRuleCall_3_0 = (RuleCall)cVarAssignment_3.eContents().get(0);
		private final Assignment cStatementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_4_0 = (RuleCall)cStatementAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Scenario:
		//    'scenario' name=ID '{' (var+=VarDef)* statement+=Statement* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'scenario' name=ID '{' (var+=VarDef)* statement+=Statement* '}'
		public Group getGroup() { return cGroup; }
		
		//'scenario'
		public Keyword getScenarioKeyword_0() { return cScenarioKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(var+=VarDef)*
		public Assignment getVarAssignment_3() { return cVarAssignment_3; }
		
		//VarDef
		public RuleCall getVarVarDefParserRuleCall_3_0() { return cVarVarDefParserRuleCall_3_0; }
		
		//statement+=Statement*
		public Assignment getStatementAssignment_4() { return cStatementAssignment_4; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_4_0() { return cStatementStatementParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class VarDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "interactive.Fictiondsl.VarDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeExpParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//VarDef:
		//    'var' name=ID ':' type=Exp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' name=ID ':' type=Exp
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=Exp
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//Exp
		public RuleCall getTypeExpParserRuleCall_3_0() { return cTypeExpParserRuleCall_3_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "interactive.Fictiondsl.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cAnnounceAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cAnnounceAnnounceParserRuleCall_0_0 = (RuleCall)cAnnounceAssignment_0.eContents().get(0);
		private final Assignment cEndAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cEndEndParserRuleCall_1_0 = (RuleCall)cEndAssignment_1.eContents().get(0);
		private final Assignment cQuestionAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cQuestionQuestionParserRuleCall_2_0 = (RuleCall)cQuestionAssignment_2.eContents().get(0);
		
		//Statement:
		//    announce+=Announce | end+=End | question+=Question
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//announce+=Announce | end+=End | question+=Question
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//announce+=Announce
		public Assignment getAnnounceAssignment_0() { return cAnnounceAssignment_0; }
		
		//Announce
		public RuleCall getAnnounceAnnounceParserRuleCall_0_0() { return cAnnounceAnnounceParserRuleCall_0_0; }
		
		//end+=End
		public Assignment getEndAssignment_1() { return cEndAssignment_1; }
		
		//End
		public RuleCall getEndEndParserRuleCall_1_0() { return cEndEndParserRuleCall_1_0; }
		
		//question+=Question
		public Assignment getQuestionAssignment_2() { return cQuestionAssignment_2; }
		
		//Question
		public RuleCall getQuestionQuestionParserRuleCall_2_0() { return cQuestionQuestionParserRuleCall_2_0; }
	}
	public class QuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "interactive.Fictiondsl.Question");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cTypeAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_3_1_0_0 = (RuleCall)cTypeAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cAlternatives_3_1.eContents().get(1);
		private final Assignment cExrefAssignment_3_1_1_0 = (Assignment)cGroup_3_1_1.eContents().get(0);
		private final CrossReference cExrefExternalCrossReference_3_1_1_0_0 = (CrossReference)cExrefAssignment_3_1_1_0.eContents().get(0);
		private final RuleCall cExrefExternalIDTerminalRuleCall_3_1_1_0_0_1 = (RuleCall)cExrefExternalCrossReference_3_1_1_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_1_1_1 = (Keyword)cGroup_3_1_1.eContents().get(1);
		private final Assignment cTypeAssignment_3_1_1_2 = (Assignment)cGroup_3_1_1.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_3_1_1_2_0 = (RuleCall)cTypeAssignment_3_1_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_1_1_3 = (Keyword)cGroup_3_1_1.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cOpAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Alternatives cOpAlternatives_4_0_0 = (Alternatives)cOpAssignment_4_0.eContents().get(0);
		private final Keyword cOpLessThanSignKeyword_4_0_0_0 = (Keyword)cOpAlternatives_4_0_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_4_0_0_1 = (Keyword)cOpAlternatives_4_0_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_4_0_0_2 = (Keyword)cOpAlternatives_4_0_0.eContents().get(2);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_4_0_0_3 = (Keyword)cOpAlternatives_4_0_0.eContents().get(3);
		private final Keyword cOpEqualsSignEqualsSignKeyword_4_0_0_4 = (Keyword)cOpAlternatives_4_0_0.eContents().get(4);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_4_0_0_5 = (Keyword)cOpAlternatives_4_0_0.eContents().get(5);
		private final Assignment cConditionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cConditionExpParserRuleCall_4_1_0 = (RuleCall)cConditionAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cInKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRefAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cRefVarDefCrossReference_5_1_0 = (CrossReference)cRefAssignment_5_1.eContents().get(0);
		private final RuleCall cRefVarDefIDTerminalRuleCall_5_1_0_1 = (RuleCall)cRefVarDefCrossReference_5_1_0.eContents().get(1);
		private final Assignment cTargetAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTargetTargetParserRuleCall_6_0 = (RuleCall)cTargetAssignment_6.eContents().get(0);
		
		//Question:
		//    'question' name=ID expression=Exp ('as' ( type=Type | exref=[External] '('type=Type')' ) )? (op=('<' | '<=' | '>' | '>='| '==' | '!=') condition=Exp)? ('in' ref=[VarDef])? target+=Target+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'question' name=ID expression=Exp ('as' ( type=Type | exref=[External] '('type=Type')' ) )? (op=('<' | '<=' | '>' | '>='| '==' | '!=') condition=Exp)? ('in' ref=[VarDef])? target+=Target+
		public Group getGroup() { return cGroup; }
		
		//'question'
		public Keyword getQuestionKeyword_0() { return cQuestionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//expression=Exp
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Exp
		public RuleCall getExpressionExpParserRuleCall_2_0() { return cExpressionExpParserRuleCall_2_0; }
		
		//('as' ( type=Type | exref=[External] '('type=Type')' ) )?
		public Group getGroup_3() { return cGroup_3; }
		
		//'as'
		public Keyword getAsKeyword_3_0() { return cAsKeyword_3_0; }
		
		//( type=Type | exref=[External] '('type=Type')' )
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//type=Type
		public Assignment getTypeAssignment_3_1_0() { return cTypeAssignment_3_1_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_3_1_0_0() { return cTypeTypeParserRuleCall_3_1_0_0; }
		
		//exref=[External] '('type=Type')'
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//exref=[External]
		public Assignment getExrefAssignment_3_1_1_0() { return cExrefAssignment_3_1_1_0; }
		
		//[External]
		public CrossReference getExrefExternalCrossReference_3_1_1_0_0() { return cExrefExternalCrossReference_3_1_1_0_0; }
		
		//ID
		public RuleCall getExrefExternalIDTerminalRuleCall_3_1_1_0_0_1() { return cExrefExternalIDTerminalRuleCall_3_1_1_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1_1_1() { return cLeftParenthesisKeyword_3_1_1_1; }
		
		//type=Type
		public Assignment getTypeAssignment_3_1_1_2() { return cTypeAssignment_3_1_1_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_3_1_1_2_0() { return cTypeTypeParserRuleCall_3_1_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_1_1_3() { return cRightParenthesisKeyword_3_1_1_3; }
		
		//(op=('<' | '<=' | '>' | '>='| '==' | '!=') condition=Exp)?
		public Group getGroup_4() { return cGroup_4; }
		
		//op=('<' | '<=' | '>' | '>='| '==' | '!=')
		public Assignment getOpAssignment_4_0() { return cOpAssignment_4_0; }
		
		//('<' | '<=' | '>' | '>='| '==' | '!=')
		public Alternatives getOpAlternatives_4_0_0() { return cOpAlternatives_4_0_0; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_4_0_0_0() { return cOpLessThanSignKeyword_4_0_0_0; }
		
		//'<='
		public Keyword getOpLessThanSignEqualsSignKeyword_4_0_0_1() { return cOpLessThanSignEqualsSignKeyword_4_0_0_1; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_4_0_0_2() { return cOpGreaterThanSignKeyword_4_0_0_2; }
		
		//'>='
		public Keyword getOpGreaterThanSignEqualsSignKeyword_4_0_0_3() { return cOpGreaterThanSignEqualsSignKeyword_4_0_0_3; }
		
		//'=='
		public Keyword getOpEqualsSignEqualsSignKeyword_4_0_0_4() { return cOpEqualsSignEqualsSignKeyword_4_0_0_4; }
		
		//'!='
		public Keyword getOpExclamationMarkEqualsSignKeyword_4_0_0_5() { return cOpExclamationMarkEqualsSignKeyword_4_0_0_5; }
		
		//condition=Exp
		public Assignment getConditionAssignment_4_1() { return cConditionAssignment_4_1; }
		
		//Exp
		public RuleCall getConditionExpParserRuleCall_4_1_0() { return cConditionExpParserRuleCall_4_1_0; }
		
		//('in' ref=[VarDef])?
		public Group getGroup_5() { return cGroup_5; }
		
		//'in'
		public Keyword getInKeyword_5_0() { return cInKeyword_5_0; }
		
		//ref=[VarDef]
		public Assignment getRefAssignment_5_1() { return cRefAssignment_5_1; }
		
		//[VarDef]
		public CrossReference getRefVarDefCrossReference_5_1_0() { return cRefVarDefCrossReference_5_1_0; }
		
		//ID
		public RuleCall getRefVarDefIDTerminalRuleCall_5_1_0_1() { return cRefVarDefIDTerminalRuleCall_5_1_0_1; }
		
		//target+=Target+
		public Assignment getTargetAssignment_6() { return cTargetAssignment_6; }
		
		//Target
		public RuleCall getTargetTargetParserRuleCall_6_0() { return cTargetTargetParserRuleCall_6_0; }
	}
	public class AnnounceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "interactive.Fictiondsl.Announce");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnnounceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAmpersandKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRefAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRefVarDefCrossReference_3_1_0 = (CrossReference)cRefAssignment_3_1.eContents().get(0);
		private final RuleCall cRefVarDefIDTerminalRuleCall_3_1_0_1 = (RuleCall)cRefVarDefCrossReference_3_1_0.eContents().get(1);
		private final Keyword cAmpersandKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cExpAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cExpExpParserRuleCall_3_3_0 = (RuleCall)cExpAssignment_3_3.eContents().get(0);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTargetTargetParserRuleCall_4_0 = (RuleCall)cTargetAssignment_4.eContents().get(0);
		
		//Announce:
		//    'announce' name=ID expression=Exp ('&' ref=[VarDef] '&' exp=Exp)? target=Target
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'announce' name=ID expression=Exp ('&' ref=[VarDef] '&' exp=Exp)? target=Target
		public Group getGroup() { return cGroup; }
		
		//'announce'
		public Keyword getAnnounceKeyword_0() { return cAnnounceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//expression=Exp
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Exp
		public RuleCall getExpressionExpParserRuleCall_2_0() { return cExpressionExpParserRuleCall_2_0; }
		
		//('&' ref=[VarDef] '&' exp=Exp)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'&'
		public Keyword getAmpersandKeyword_3_0() { return cAmpersandKeyword_3_0; }
		
		//ref=[VarDef]
		public Assignment getRefAssignment_3_1() { return cRefAssignment_3_1; }
		
		//[VarDef]
		public CrossReference getRefVarDefCrossReference_3_1_0() { return cRefVarDefCrossReference_3_1_0; }
		
		//ID
		public RuleCall getRefVarDefIDTerminalRuleCall_3_1_0_1() { return cRefVarDefIDTerminalRuleCall_3_1_0_1; }
		
		//'&'
		public Keyword getAmpersandKeyword_3_2() { return cAmpersandKeyword_3_2; }
		
		//exp=Exp
		public Assignment getExpAssignment_3_3() { return cExpAssignment_3_3; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_3_3_0() { return cExpExpParserRuleCall_3_3_0; }
		
		//target=Target
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }
		
		//Target
		public RuleCall getTargetTargetParserRuleCall_4_0() { return cTargetTargetParserRuleCall_4_0; }
	}
	public class TargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "interactive.Fictiondsl.Target");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cToKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefSomeRefCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefSomeRefIDTerminalRuleCall_1_0_1 = (RuleCall)cRefSomeRefCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cAlternatives_2_1.eContents().get(0);
		private final Assignment cExrefAssignment_2_1_0_0 = (Assignment)cGroup_2_1_0.eContents().get(0);
		private final CrossReference cExrefExternalCrossReference_2_1_0_0_0 = (CrossReference)cExrefAssignment_2_1_0_0.eContents().get(0);
		private final RuleCall cExrefExternalIDTerminalRuleCall_2_1_0_0_0_1 = (RuleCall)cExrefExternalCrossReference_2_1_0_0_0.eContents().get(1);
		private final Group cGroup_2_1_0_1 = (Group)cGroup_2_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_0_1_0 = (Keyword)cGroup_2_1_0_1.eContents().get(0);
		private final Alternatives cAlternatives_2_1_0_1_1 = (Alternatives)cGroup_2_1_0_1.eContents().get(1);
		private final Keyword cThisKeyword_2_1_0_1_1_0 = (Keyword)cAlternatives_2_1_0_1_1.eContents().get(0);
		private final Assignment cVardefAssignment_2_1_0_1_1_1 = (Assignment)cAlternatives_2_1_0_1_1.eContents().get(1);
		private final CrossReference cVardefVarDefCrossReference_2_1_0_1_1_1_0 = (CrossReference)cVardefAssignment_2_1_0_1_1_1.eContents().get(0);
		private final RuleCall cVardefVarDefIDTerminalRuleCall_2_1_0_1_1_1_0_1 = (RuleCall)cVardefVarDefCrossReference_2_1_0_1_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_1_0_1_2 = (Keyword)cGroup_2_1_0_1.eContents().get(2);
		private final Assignment cConditionAssignment_2_1_0_1_3 = (Assignment)cGroup_2_1_0_1.eContents().get(3);
		private final RuleCall cConditionExpParserRuleCall_2_1_0_1_3_0 = (RuleCall)cConditionAssignment_2_1_0_1_3.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cAlternatives_2_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cVardefAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final CrossReference cVardefVarDefCrossReference_2_1_1_1_0 = (CrossReference)cVardefAssignment_2_1_1_1.eContents().get(0);
		private final RuleCall cVardefVarDefIDTerminalRuleCall_2_1_1_1_0_1 = (RuleCall)cVardefVarDefCrossReference_2_1_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_1_1_2 = (Keyword)cGroup_2_1_1.eContents().get(2);
		private final Assignment cResAssignment_2_1_1_3 = (Assignment)cGroup_2_1_1.eContents().get(3);
		private final RuleCall cResExpParserRuleCall_2_1_1_3_0 = (RuleCall)cResAssignment_2_1_1_3.eContents().get(0);
		private final Assignment cConditionAssignment_2_1_2 = (Assignment)cAlternatives_2_1.eContents().get(2);
		private final RuleCall cConditionExpParserRuleCall_2_1_2_0 = (RuleCall)cConditionAssignment_2_1_2.eContents().get(0);
		private final Group cGroup_2_1_3 = (Group)cAlternatives_2_1.eContents().get(3);
		private final Assignment cVardefAssignment_2_1_3_0 = (Assignment)cGroup_2_1_3.eContents().get(0);
		private final CrossReference cVardefVarDefCrossReference_2_1_3_0_0 = (CrossReference)cVardefAssignment_2_1_3_0.eContents().get(0);
		private final RuleCall cVardefVarDefIDTerminalRuleCall_2_1_3_0_0_1 = (RuleCall)cVardefVarDefCrossReference_2_1_3_0_0.eContents().get(1);
		private final Assignment cConditionAssignment_2_1_3_1 = (Assignment)cGroup_2_1_3.eContents().get(1);
		private final RuleCall cConditionExpParserRuleCall_2_1_3_1_0 = (RuleCall)cConditionAssignment_2_1_3_1.eContents().get(0);
		
		//Target:
		//    'to' ref=[SomeRef] ('if' (exref=[External] ( '(' ('this' | vardef=[VarDef]) ')' condition=Exp? )?  | '(' vardef=[VarDef]')' (res=Exp)? | condition=Exp | vardef=[VarDef] condition=Exp) )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'to' ref=[SomeRef] ('if' (exref=[External] ( '(' ('this' | vardef=[VarDef]) ')' condition=Exp? )?  | '(' vardef=[VarDef]')' (res=Exp)? | condition=Exp | vardef=[VarDef] condition=Exp) )?
		public Group getGroup() { return cGroup; }
		
		//'to'
		public Keyword getToKeyword_0() { return cToKeyword_0; }
		
		//ref=[SomeRef]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[SomeRef]
		public CrossReference getRefSomeRefCrossReference_1_0() { return cRefSomeRefCrossReference_1_0; }
		
		//ID
		public RuleCall getRefSomeRefIDTerminalRuleCall_1_0_1() { return cRefSomeRefIDTerminalRuleCall_1_0_1; }
		
		//('if' (exref=[External] ( '(' ('this' | vardef=[VarDef]) ')' condition=Exp? )?  | '(' vardef=[VarDef]')' (res=Exp)? | condition=Exp | vardef=[VarDef] condition=Exp) )?
		public Group getGroup_2() { return cGroup_2; }
		
		//'if'
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }
		
		//(exref=[External] ( '(' ('this' | vardef=[VarDef]) ')' condition=Exp? )?  | '(' vardef=[VarDef]')' (res=Exp)? | condition=Exp | vardef=[VarDef] condition=Exp)
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//exref=[External] ( '(' ('this' | vardef=[VarDef]) ')' condition=Exp? )?
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }
		
		//exref=[External]
		public Assignment getExrefAssignment_2_1_0_0() { return cExrefAssignment_2_1_0_0; }
		
		//[External]
		public CrossReference getExrefExternalCrossReference_2_1_0_0_0() { return cExrefExternalCrossReference_2_1_0_0_0; }
		
		//ID
		public RuleCall getExrefExternalIDTerminalRuleCall_2_1_0_0_0_1() { return cExrefExternalIDTerminalRuleCall_2_1_0_0_0_1; }
		
		//( '(' ('this' | vardef=[VarDef]) ')' condition=Exp? )?
		public Group getGroup_2_1_0_1() { return cGroup_2_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1_0_1_0() { return cLeftParenthesisKeyword_2_1_0_1_0; }
		
		//('this' | vardef=[VarDef])
		public Alternatives getAlternatives_2_1_0_1_1() { return cAlternatives_2_1_0_1_1; }
		
		//'this'
		public Keyword getThisKeyword_2_1_0_1_1_0() { return cThisKeyword_2_1_0_1_1_0; }
		
		//vardef=[VarDef]
		public Assignment getVardefAssignment_2_1_0_1_1_1() { return cVardefAssignment_2_1_0_1_1_1; }
		
		//[VarDef]
		public CrossReference getVardefVarDefCrossReference_2_1_0_1_1_1_0() { return cVardefVarDefCrossReference_2_1_0_1_1_1_0; }
		
		//ID
		public RuleCall getVardefVarDefIDTerminalRuleCall_2_1_0_1_1_1_0_1() { return cVardefVarDefIDTerminalRuleCall_2_1_0_1_1_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_0_1_2() { return cRightParenthesisKeyword_2_1_0_1_2; }
		
		//condition=Exp?
		public Assignment getConditionAssignment_2_1_0_1_3() { return cConditionAssignment_2_1_0_1_3; }
		
		//Exp
		public RuleCall getConditionExpParserRuleCall_2_1_0_1_3_0() { return cConditionExpParserRuleCall_2_1_0_1_3_0; }
		
		//'(' vardef=[VarDef]')' (res=Exp)?
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1_1_0() { return cLeftParenthesisKeyword_2_1_1_0; }
		
		//vardef=[VarDef]
		public Assignment getVardefAssignment_2_1_1_1() { return cVardefAssignment_2_1_1_1; }
		
		//[VarDef]
		public CrossReference getVardefVarDefCrossReference_2_1_1_1_0() { return cVardefVarDefCrossReference_2_1_1_1_0; }
		
		//ID
		public RuleCall getVardefVarDefIDTerminalRuleCall_2_1_1_1_0_1() { return cVardefVarDefIDTerminalRuleCall_2_1_1_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_1_2() { return cRightParenthesisKeyword_2_1_1_2; }
		
		//(res=Exp)?
		public Assignment getResAssignment_2_1_1_3() { return cResAssignment_2_1_1_3; }
		
		//Exp
		public RuleCall getResExpParserRuleCall_2_1_1_3_0() { return cResExpParserRuleCall_2_1_1_3_0; }
		
		//condition=Exp
		public Assignment getConditionAssignment_2_1_2() { return cConditionAssignment_2_1_2; }
		
		//Exp
		public RuleCall getConditionExpParserRuleCall_2_1_2_0() { return cConditionExpParserRuleCall_2_1_2_0; }
		
		//vardef=[VarDef] condition=Exp
		public Group getGroup_2_1_3() { return cGroup_2_1_3; }
		
		//vardef=[VarDef]
		public Assignment getVardefAssignment_2_1_3_0() { return cVardefAssignment_2_1_3_0; }
		
		//[VarDef]
		public CrossReference getVardefVarDefCrossReference_2_1_3_0_0() { return cVardefVarDefCrossReference_2_1_3_0_0; }
		
		//ID
		public RuleCall getVardefVarDefIDTerminalRuleCall_2_1_3_0_0_1() { return cVardefVarDefIDTerminalRuleCall_2_1_3_0_0_1; }
		
		//condition=Exp
		public Assignment getConditionAssignment_2_1_3_1() { return cConditionAssignment_2_1_3_1; }
		
		//Exp
		public RuleCall getConditionExpParserRuleCall_2_1_3_1_0() { return cConditionExpParserRuleCall_2_1_3_1_0; }
	}
	public class EndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "interactive.Fictiondsl.End");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAmpersandKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRefAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRefVarDefCrossReference_3_1_0 = (CrossReference)cRefAssignment_3_1.eContents().get(0);
		private final RuleCall cRefVarDefIDTerminalRuleCall_3_1_0_1 = (RuleCall)cRefVarDefCrossReference_3_1_0.eContents().get(1);
		private final Keyword cAmpersandKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cExpAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cExpExpParserRuleCall_3_3_0 = (RuleCall)cExpAssignment_3_3.eContents().get(0);
		
		//End:
		//    'end' name=ID expression=Exp ('&' ref=[VarDef] '&' exp=Exp)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'end' name=ID expression=Exp ('&' ref=[VarDef] '&' exp=Exp)?
		public Group getGroup() { return cGroup; }
		
		//'end'
		public Keyword getEndKeyword_0() { return cEndKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//expression=Exp
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Exp
		public RuleCall getExpressionExpParserRuleCall_2_0() { return cExpressionExpParserRuleCall_2_0; }
		
		//('&' ref=[VarDef] '&' exp=Exp)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'&'
		public Keyword getAmpersandKeyword_3_0() { return cAmpersandKeyword_3_0; }
		
		//ref=[VarDef]
		public Assignment getRefAssignment_3_1() { return cRefAssignment_3_1; }
		
		//[VarDef]
		public CrossReference getRefVarDefCrossReference_3_1_0() { return cRefVarDefCrossReference_3_1_0; }
		
		//ID
		public RuleCall getRefVarDefIDTerminalRuleCall_3_1_0_1() { return cRefVarDefIDTerminalRuleCall_3_1_0_1; }
		
		//'&'
		public Keyword getAmpersandKeyword_3_2() { return cAmpersandKeyword_3_2; }
		
		//exp=Exp
		public Assignment getExpAssignment_3_3() { return cExpAssignment_3_3; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_3_3_0() { return cExpExpParserRuleCall_3_3_0; }
	}
	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "interactive.Fictiondsl.Exp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cEndingAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Assignment cNumberAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNumberINTTerminalRuleCall_1_0 = (RuleCall)cNumberAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cThisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cEvaluateParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cEvaluateParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Exp returns Expression:
		//  {Ending} value=STRING |
		//   number=INT |
		//   type=Type |
		//   'this' Evaluate |
		//   Evaluate
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Ending} value=STRING |
		// number=INT |
		// type=Type |
		// 'this' Evaluate |
		// Evaluate
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Ending} value=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//{Ending}
		public Action getEndingAction_0_0() { return cEndingAction_0_0; }
		
		//value=STRING
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_1_0() { return cValueSTRINGTerminalRuleCall_0_1_0; }
		
		//number=INT
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_1_0() { return cNumberINTTerminalRuleCall_1_0; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
		
		//'this' Evaluate
		public Group getGroup_3() { return cGroup_3; }
		
		//'this'
		public Keyword getThisKeyword_3_0() { return cThisKeyword_3_0; }
		
		//Evaluate
		public RuleCall getEvaluateParserRuleCall_3_1() { return cEvaluateParserRuleCall_3_1; }
		
		//Evaluate
		public RuleCall getEvaluateParserRuleCall_4() { return cEvaluateParserRuleCall_4; }
	}
	public class EvaluateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "interactive.Fictiondsl.Evaluate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cAddAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cAddAlternatives_0_0_0 = (Alternatives)cAddAssignment_0_0.eContents().get(0);
		private final Keyword cAddPlusSignKeyword_0_0_0_0 = (Keyword)cAddAlternatives_0_0_0.eContents().get(0);
		private final Keyword cAddHyphenMinusKeyword_0_0_0_1 = (Keyword)cAddAlternatives_0_0_0.eContents().get(1);
		private final Assignment cRefAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cRefVarDefCrossReference_0_1_0 = (CrossReference)cRefAssignment_0_1.eContents().get(0);
		private final RuleCall cRefVarDefIDTerminalRuleCall_0_1_0_1 = (RuleCall)cRefVarDefCrossReference_0_1_0.eContents().get(1);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0 = (Alternatives)cOpAssignment_1.eContents().get(0);
		private final Keyword cOpLessThanSignKeyword_1_0_0 = (Keyword)cOpAlternatives_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_0_1 = (Keyword)cOpAlternatives_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_0_2 = (Keyword)cOpAlternatives_1_0.eContents().get(2);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_0_3 = (Keyword)cOpAlternatives_1_0.eContents().get(3);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_0_4 = (Keyword)cOpAlternatives_1_0.eContents().get(4);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_0_5 = (Keyword)cOpAlternatives_1_0.eContents().get(5);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//Evaluate returns Expression:
		//    (add=('+'| '-') ref=[VarDef])? op=('<' | '<=' | '>' | '>='| '==' | '!=') exp=Exp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(add=('+'| '-') ref=[VarDef])? op=('<' | '<=' | '>' | '>='| '==' | '!=') exp=Exp
		public Group getGroup() { return cGroup; }
		
		//(add=('+'| '-') ref=[VarDef])?
		public Group getGroup_0() { return cGroup_0; }
		
		//add=('+'| '-')
		public Assignment getAddAssignment_0_0() { return cAddAssignment_0_0; }
		
		//('+'| '-')
		public Alternatives getAddAlternatives_0_0_0() { return cAddAlternatives_0_0_0; }
		
		//'+'
		public Keyword getAddPlusSignKeyword_0_0_0_0() { return cAddPlusSignKeyword_0_0_0_0; }
		
		//'-'
		public Keyword getAddHyphenMinusKeyword_0_0_0_1() { return cAddHyphenMinusKeyword_0_0_0_1; }
		
		//ref=[VarDef]
		public Assignment getRefAssignment_0_1() { return cRefAssignment_0_1; }
		
		//[VarDef]
		public CrossReference getRefVarDefCrossReference_0_1_0() { return cRefVarDefCrossReference_0_1_0; }
		
		//ID
		public RuleCall getRefVarDefIDTerminalRuleCall_0_1_0_1() { return cRefVarDefIDTerminalRuleCall_0_1_0_1; }
		
		//op=('<' | '<=' | '>' | '>='| '==' | '!=')
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//('<' | '<=' | '>' | '>='| '==' | '!=')
		public Alternatives getOpAlternatives_1_0() { return cOpAlternatives_1_0; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_1_0_0() { return cOpLessThanSignKeyword_1_0_0; }
		
		//'<='
		public Keyword getOpLessThanSignEqualsSignKeyword_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_0_1; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_1_0_2() { return cOpGreaterThanSignKeyword_1_0_2; }
		
		//'>='
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_0_3() { return cOpGreaterThanSignEqualsSignKeyword_1_0_3; }
		
		//'=='
		public Keyword getOpEqualsSignEqualsSignKeyword_1_0_4() { return cOpEqualsSignEqualsSignKeyword_1_0_4; }
		
		//'!='
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_0_5() { return cOpExclamationMarkEqualsSignKeyword_1_0_5; }
		
		//exp=Exp
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_2_0() { return cExpExpParserRuleCall_2_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "interactive.Fictiondsl.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTextKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNumberKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBooleanKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Type:
		//        'text' |
		//         'number' |
		//         'boolean'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'text' |
		// 'number' |
		// 'boolean'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'text'
		public Keyword getTextKeyword_0() { return cTextKeyword_0; }
		
		//'number'
		public Keyword getNumberKeyword_1() { return cNumberKeyword_1; }
		
		//'boolean'
		public Keyword getBooleanKeyword_2() { return cBooleanKeyword_2; }
	}
	public class SomeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "interactive.Fictiondsl.SomeRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnnounceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEndParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cQuestionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SomeRef:
		//    Announce | End | Question
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Announce | End | Question
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Announce
		public RuleCall getAnnounceParserRuleCall_0() { return cAnnounceParserRuleCall_0; }
		
		//End
		public RuleCall getEndParserRuleCall_1() { return cEndParserRuleCall_1; }
		
		//Question
		public RuleCall getQuestionParserRuleCall_2() { return cQuestionParserRuleCall_2; }
	}
	
	
	private final StoryElements pStory;
	private final ExternalElements pExternal;
	private final ScenarioElements pScenario;
	private final VarDefElements pVarDef;
	private final StatementElements pStatement;
	private final QuestionElements pQuestion;
	private final AnnounceElements pAnnounce;
	private final TargetElements pTarget;
	private final EndElements pEnd;
	private final ExpElements pExp;
	private final EvaluateElements pEvaluate;
	private final TypeElements pType;
	private final SomeRefElements pSomeRef;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FictiondslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStory = new StoryElements();
		this.pExternal = new ExternalElements();
		this.pScenario = new ScenarioElements();
		this.pVarDef = new VarDefElements();
		this.pStatement = new StatementElements();
		this.pQuestion = new QuestionElements();
		this.pAnnounce = new AnnounceElements();
		this.pTarget = new TargetElements();
		this.pEnd = new EndElements();
		this.pExp = new ExpElements();
		this.pEvaluate = new EvaluateElements();
		this.pType = new TypeElements();
		this.pSomeRef = new SomeRefElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("interactive.Fictiondsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Story:
	//    'story' name=ID external+=External* scenario+=Scenario*
	//;
	public StoryElements getStoryAccess() {
		return pStory;
	}
	
	public ParserRule getStoryRule() {
		return getStoryAccess().getRule();
	}
	
	//External:
	//    'function' name=ID '('type=Type')' ':' result=Type
	//;
	public ExternalElements getExternalAccess() {
		return pExternal;
	}
	
	public ParserRule getExternalRule() {
		return getExternalAccess().getRule();
	}
	
	//Scenario:
	//    'scenario' name=ID '{' (var+=VarDef)* statement+=Statement* '}'
	//;
	public ScenarioElements getScenarioAccess() {
		return pScenario;
	}
	
	public ParserRule getScenarioRule() {
		return getScenarioAccess().getRule();
	}
	
	//VarDef:
	//    'var' name=ID ':' type=Exp
	//;
	public VarDefElements getVarDefAccess() {
		return pVarDef;
	}
	
	public ParserRule getVarDefRule() {
		return getVarDefAccess().getRule();
	}
	
	//Statement:
	//    announce+=Announce | end+=End | question+=Question
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Question:
	//    'question' name=ID expression=Exp ('as' ( type=Type | exref=[External] '('type=Type')' ) )? (op=('<' | '<=' | '>' | '>='| '==' | '!=') condition=Exp)? ('in' ref=[VarDef])? target+=Target+
	//;
	public QuestionElements getQuestionAccess() {
		return pQuestion;
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}
	
	//Announce:
	//    'announce' name=ID expression=Exp ('&' ref=[VarDef] '&' exp=Exp)? target=Target
	//;
	public AnnounceElements getAnnounceAccess() {
		return pAnnounce;
	}
	
	public ParserRule getAnnounceRule() {
		return getAnnounceAccess().getRule();
	}
	
	//Target:
	//    'to' ref=[SomeRef] ('if' (exref=[External] ( '(' ('this' | vardef=[VarDef]) ')' condition=Exp? )?  | '(' vardef=[VarDef]')' (res=Exp)? | condition=Exp | vardef=[VarDef] condition=Exp) )?
	//;
	public TargetElements getTargetAccess() {
		return pTarget;
	}
	
	public ParserRule getTargetRule() {
		return getTargetAccess().getRule();
	}
	
	//End:
	//    'end' name=ID expression=Exp ('&' ref=[VarDef] '&' exp=Exp)?
	//;
	public EndElements getEndAccess() {
		return pEnd;
	}
	
	public ParserRule getEndRule() {
		return getEndAccess().getRule();
	}
	
	//Exp returns Expression:
	//  {Ending} value=STRING |
	//   number=INT |
	//   type=Type |
	//   'this' Evaluate |
	//   Evaluate
	//;
	public ExpElements getExpAccess() {
		return pExp;
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}
	
	//Evaluate returns Expression:
	//    (add=('+'| '-') ref=[VarDef])? op=('<' | '<=' | '>' | '>='| '==' | '!=') exp=Exp
	//;
	public EvaluateElements getEvaluateAccess() {
		return pEvaluate;
	}
	
	public ParserRule getEvaluateRule() {
		return getEvaluateAccess().getRule();
	}
	
	//Type:
	//        'text' |
	//         'number' |
	//         'boolean'
	//;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//SomeRef:
	//    Announce | End | Question
	//;
	public SomeRefElements getSomeRefAccess() {
		return pSomeRef;
	}
	
	public ParserRule getSomeRefRule() {
		return getSomeRefAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
