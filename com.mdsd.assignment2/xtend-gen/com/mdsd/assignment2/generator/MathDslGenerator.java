/**
 * generated by Xtext 2.30.0
 */
package com.mdsd.assignment2.generator;

import com.google.common.collect.Iterators;
import com.mdsd.assignment2.mathdsl.MathExp;
import com.mdsd.assignment2.mathdsl.VarBinding;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MathDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Function1<MathExp, EList<VarBinding>> _function = (MathExp it) -> {
      return it.getVariables();
    };
    String _join = IteratorExtensions.join(IteratorExtensions.<MathExp, EList<VarBinding>>map(Iterators.<MathExp>filter(resource.getAllContents(), MathExp.class), _function), ", ");
    String _plus = ("Mathematical operations to perform: " + _join);
    fsa.generateFile("Math.txt", _plus);
  }
}
