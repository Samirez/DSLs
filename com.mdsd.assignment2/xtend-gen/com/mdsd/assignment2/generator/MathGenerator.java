/**
 * generated by Xtext 2.30.0
 */
package com.mdsd.assignment2.generator;

import com.google.common.collect.Iterators;
import com.mdsd.assignment2.mathdsl.Binding;
import com.mdsd.assignment2.mathdsl.Div;
import com.mdsd.assignment2.mathdsl.Expression;
import com.mdsd.assignment2.mathdsl.LetBinding;
import com.mdsd.assignment2.mathdsl.MathExp;
import com.mdsd.assignment2.mathdsl.Minus;
import com.mdsd.assignment2.mathdsl.Mult;
import com.mdsd.assignment2.mathdsl.Num;
import com.mdsd.assignment2.mathdsl.Plus;
import com.mdsd.assignment2.mathdsl.VarBinding;
import com.mdsd.assignment2.mathdsl.VarUse;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;
import javax.swing.JOptionPane;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.InputOutput;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MathGenerator extends AbstractGenerator {
  private static Map<String, Integer> variables = new HashMap<String, Integer>();

  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final MathExp math = Iterators.<MathExp>filter(resource.getAllContents(), MathExp.class).next();
    final Map<String, Integer> result = MathGenerator.compute(math);
    this.displayPanel(result);
  }

  public static Map<String, Integer> compute(final MathExp math) {
    final Consumer<VarBinding> _function = (VarBinding varbinding) -> {
      final int value = MathGenerator.computeExp(varbinding.getExp());
      final String varName = varbinding.getName();
      MathGenerator.variables.put(varName, Integer.valueOf(value));
    };
    math.getVariables().forEach(_function);
    return MathGenerator.variables;
  }

  public static int computeExp(final Expression exp) {
    int _switchResult = (int) 0;
    boolean _matched = false;
    if (exp instanceof Plus) {
      _matched=true;
      int _computeExp = MathGenerator.computeExp(((Plus)exp).getLeft());
      int _computeExp_1 = MathGenerator.computeExp(((Plus)exp).getRight());
      _switchResult = (_computeExp + _computeExp_1);
    }
    if (!_matched) {
      if (exp instanceof Minus) {
        _matched=true;
        int _computeExp = MathGenerator.computeExp(((Minus)exp).getLeft());
        int _computeExp_1 = MathGenerator.computeExp(((Minus)exp).getRight());
        _switchResult = (_computeExp - _computeExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Mult) {
        _matched=true;
        int _computeExp = MathGenerator.computeExp(((Mult)exp).getLeft());
        int _computeExp_1 = MathGenerator.computeExp(((Mult)exp).getRight());
        _switchResult = (_computeExp * _computeExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Div) {
        _matched=true;
        int _computeExp = MathGenerator.computeExp(((Div)exp).getLeft());
        int _computeExp_1 = MathGenerator.computeExp(((Div)exp).getRight());
        _switchResult = (_computeExp / _computeExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Num) {
        _matched=true;
        _switchResult = ((Num)exp).getValue();
      }
    }
    if (!_matched) {
      if (exp instanceof LetBinding) {
        _matched=true;
        _switchResult = MathGenerator.computeExp(((LetBinding)exp).getBody());
      }
    }
    if (!_matched) {
      if (exp instanceof VarBinding) {
        _matched=true;
        _switchResult = MathGenerator.computeExp(((VarBinding)exp).getExp());
      }
    }
    if (!_matched) {
      if (exp instanceof VarUse) {
        _matched=true;
        _switchResult = MathGenerator.computeBinding(((VarUse)exp).getRef());
      }
    }
    if (!_matched) {
      throw new Error("Invalid expression");
    }
    return _switchResult;
  }

  protected static int _computeBinding(final VarBinding binding) {
    Integer _xblockexpression = null;
    {
      boolean _containsKey = MathGenerator.variables.containsKey(binding.getName());
      boolean _not = (!_containsKey);
      if (_not) {
        MathGenerator.computeExp(binding.getExp());
      }
      _xblockexpression = MathGenerator.variables.get(binding.getName());
    }
    return (_xblockexpression).intValue();
  }

  protected static int _computeBinding(final LetBinding binding) {
    return MathGenerator.computeExp(binding.getBinding());
  }

  public static int computeExp(final LetBinding exp) {
    return MathGenerator.computeExp(exp.getBody());
  }

  public static int computeExp(final VarBinding binding) {
    MathGenerator.variables.put(binding.getName(), Integer.valueOf(MathGenerator.computeExp(binding.getExp())));
    return (MathGenerator.variables.get(binding.getName())).intValue();
  }

  /**
   * def static Map<String, Integer> bind(Map<String, Integer> env, String name, int value){
   * val env2 = new HashMap<String, Integer>(env)
   * env2.put(name, value)
   * return env2
   * }
   * def String displayPanel(MathExp math){
   * math.exp.displayExp
   * }
   * def String displayExp(Expression exp){
   * '('+switch (exp){
   * Plus: exp.left.displayExp+'+'+exp.right.displayExp
   * Minus: exp.left.displayExp+'-'+exp.right.displayExp
   * Mult: exp.left.displayExp+'*'+exp.right.displayExp
   * Div: exp.left.displayExp+'/'+exp.right.displayExp
   * Num: Integer.toString(exp.value)
   * //Var: exp.id
   * //VarReference: exp.reference.computeVariable
   * Let: '''let «exp» = «exp.binding.displayExp» in «exp.body.displayExp» end'''
   * default: throw new Error('Invalid expression')
   * }+')'
   * }
   */
  public void displayPanel(final Map<String, Integer> result) {
    String resultString = "";
    Set<Map.Entry<String, Integer>> _entrySet = result.entrySet();
    for (final Map.Entry<String, Integer> entry : _entrySet) {
      String _resultString = resultString;
      String _key = entry.getKey();
      String _plus = ("var " + _key);
      String _plus_1 = (_plus + " = ");
      Integer _value = entry.getValue();
      String _plus_2 = (_plus_1 + _value);
      String _plus_3 = (_plus_2 + "\n");
      resultString = (_resultString + _plus_3);
    }
    JOptionPane.showMessageDialog(null, resultString, "Math Language", JOptionPane.INFORMATION_MESSAGE);
    this.printExpression(result);
  }

  public void printExpression(final Map<String, Integer> result) {
    Set<Map.Entry<String, Integer>> _entrySet = result.entrySet();
    for (final Map.Entry<String, Integer> entry : _entrySet) {
      InputOutput.<Integer>println(entry.getValue());
    }
  }

  public static int computeBinding(final Binding binding) {
    if (binding instanceof LetBinding) {
      return _computeBinding((LetBinding)binding);
    } else if (binding instanceof VarBinding) {
      return _computeBinding((VarBinding)binding);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(binding).toString());
    }
  }
}
